// abxProject

// feb 13 2012
// added neon to the server list

global proc abxProject () {
	global int $hideProjMan;
	if ($hideProjMan != 1){
		if (!`window -exists abxProjectWindow`){
			window -title "PandaPanther Project Manager" -width 580 -height 540 -menuBar true abxProjectWindow;
			string $ppResources = `getenv PP_RESOURCE`;
			string $ppTools = `getenv MAYA_PPTOOLS`;


			//menu -label "Create";
			//	menuItem -label "New Job" ;
			//	menuItem -label "New Maya Project";

			formLayout abxProjectWindowMainForm;
			image -w 99 -h 52 -image ($ppTools+"/icons/pandapantherLogo.png") abxProjectLogoImage;
			columnLayout abxProjectDetailsCol;
			text -font "fixedWidthFont" -label ("Current Project: "+`workspace -q -rd`);
			//text -font "fixedWidthFont" -label ("     Resolution: 1920 X 1080");
			//text -font "fixedWidthFont" -label ("            FPS: 24");

				
			setParent ..;

			button -l "Set Project" -c "abxProjectSetProjectToSelected;window -e -vis 0 abxProjectWindow;" -al "center" -h 26 abxProjectBtnRefresh ;
			button -l "Close" -c "window -e -vis 0 abxProjectWindow" -al "center" -h 26 abxProjectBtnClose ;


			//image -w 32 -h 32 -image "channelLayers.png" abxProjectLogoImage;

			
			paneLayout -configuration "vertical2" abxProjectMainPane;
			formLayout abxProjectLibForm;
			
			formLayout -p abxProjectMainPane abxProjectDetailsForm;

			//text -label "Maya Projects (database):" abxProjectTL1;
				frameLayout -cll 1 -bs "etchedIn" -l "Maya Projects (database):" abxProjectListFrmeLyt;
					string $projLister = `treeView -numberOfButtons 0 -abr true -enk true -idc "abxProjectTreeSetProject" -sc "abxProjectSetActiveProject " -cmc "" abxProjectProjectList`;

				setParent ..;
			columnLayout -cat "both" 0 -rs 2 -adj 1 abxProjectDtlColLyt;
				button -l "Add Maya Project" -al "center" -h 26 -c "abxProjectCreateProjectProc";
				separator -style "none" -h 10;
				frameLayout -cll 1 -bs "etchedIn" -l "Maya Project Defaults" abxProjectDefaultsLyt;
					/*
					rowLayout -numberOfColumns 2 -rat 2 "top" 0 -adj 2;
						frameLayout -lv 0 abxProjectDetailImgFrmLyt;
							image -h 100 -w 177 -i ($ppTools+"/icons/shotThumb.png") abxProjectDetailImg;
							popupMenu;
								menuItem -label "Capture Thumbnail" -c "abxProjectCaptureThumbnail \"\"";
						setParent..;
					*/
					columnLayout -cat "both" 3 -rs 2 -adj true;
						//textFieldGrp -cw 1 80 -cw 2 122 -adj 2 -label "Project Name:" -text  "" -editable false abxProjectDtlShotName;
						separator -style "none" -h 5;
						textFieldGrp -cw 1 90 -cw 2 122 -adj 2 -label "Frame Rate:" -text  "24fps" -editable false abxProjectDtlFPS;
						//rowLayout -numberOfColumns 3 -ca 1 "right" 0 -cw1 90 -adj 2;
						//	text -label "Resolution:";

						floatFieldGrp -en1 0 -en2 0 -cw 1 90 -cw 2 60 -cw 3 60 -nf 2 -pre 3 -label "Resolution:" -v1 0 -v2 0 abxProjectDtlRes;
						floatFieldGrp -en1 0 -en2 0 -cw 1 90 -cw 2 60 -cw 3 60 -nf 2 -pre 3 -label "Film Aperture:" -v1 0 -v2 0 abxProjectDtlAperture;
						textFieldGrp -cw 1 90 -cw 2 122 -adj 2 -label "Pixel Aspect:" -text  "1.0" -editable false abxProjectDtlAspect;
						textFieldGrp -cw 1 90 -cw 2 122 -adj 2 -label "Scene Scale:" -text  "default" -editable false abxProjectDtlScale;
						textFieldGrp -cw 1 90 -cw 2 122 -adj 2 -label "Renderer:" -text  "mentalRay" -editable false abxProjectDtlRenderer;
						textFieldGrp -cw 1 90 -cw 2 122 -adj 2 -label "Render Width" -text "" -editable false abxProjectDtlRWidth;
						textFieldGrp -cw 1 90 -cw 2 122 -adj 2 -label "Render Height:" -text "" -editable false abxProjectDtlRHeight;
						textFieldGrp -cw 1 90 -cw 2 122 -adj 2 -label "Color Space:" -text "" -editable false abxProjectDtlCSpace;
						//rowLayout -numberOfColumns 2 -cw1 90 -adj 1;
						//	separator -style "none" -w 90;
							//button -w 120 -en 1 -l "Modify Defaults" -c "" abxProjectEditRangeBtn;
						//	button -w 120 -en 1 -l "Modify Defaults" -c "" abxProjectEditRangeBtn;
						//	setParent ..;
						separator -style "none" -h 5;
						rowLayout -numberOfColumns 3 -rat 2 "top" 0 -adj 1;
							separator -style "none";
							button -vis 0 -l "Apply Defaults" -al "center" -h 26 -w 100 -c "abxProjectApplyDefaults" abxProjectApplyDefaultsBtn;
							button -l "Edit Defaults" -al "center" -h 26 -w 100 -c "abxProjectEditDefaults" abxProjectEditDefaultsBtn;
							setParent ..;
						separator -style "none" -h 5;
						setParent..;
					setParent..;
				
			// buttons for adding stuff

			//button -l "New Job" -c "abxProjectCreateNewJobUI;" -al "center" -h 26 ;

			setParent abxProjectLibForm;
			frameLayout -cll 0 -bs "etchedIn" -l "PandaPanther Jobs:" abxProjectJobListFrmeLyt;
				//text -label "Jobs:" abxProjectTL2;

				//string $jobLister = `textScrollList  abxProjectJobList`;
				string $jobLister = `treeView -numberOfButtons 0 -abr true -enk true -idc "abxProjectTreeSetProject" -sc "abxProjectSetActiveJob " -cmc "" abxProjectJobList`;
			setParent ..;

			string $pMenu = `popupMenu -parent $jobLister abxProjectPopupMenu`;		




			abxProjectBuildMenu  $jobLister;

			abxProjectPopulateList;

			formLayout -e
	        		-af abxProjectMainPane top 52
	        		-af abxProjectMainPane left 0
	        		-af abxProjectMainPane bottom 35
	        		-af abxProjectMainPane right 0

				-af abxProjectLogoImage top 0
				-af abxProjectLogoImage left 0
	        		-an abxProjectLogoImage bottom
	        		-an abxProjectLogoImage right

				-ac abxProjectDetailsCol left 0 abxProjectLogoImage
				-af abxProjectDetailsCol top 0

		    		-attachForm abxProjectBtnRefresh "left" 5 
		    		-attachPosition abxProjectBtnRefresh "right" 3 50
				-attachNone abxProjectBtnRefresh "top"
				-attachForm abxProjectBtnRefresh "bottom" 5
		    
				-attachPosition abxProjectBtnClose "left" 3 50
				-attachForm abxProjectBtnClose "right" 5
				-attachNone abxProjectBtnClose "top"
				-attachForm abxProjectBtnClose "bottom" 5


	        		abxProjectWindowMainForm;

			formLayout -e 
				-af abxProjectJobListFrmeLyt left 5
				-af abxProjectJobListFrmeLyt top 0
				-af abxProjectJobListFrmeLyt right 2
				-af abxProjectJobListFrmeLyt bottom 5
				abxProjectLibForm;

			formLayout -e 
				-af abxProjectListFrmeLyt left 2
				-af abxProjectListFrmeLyt top 0
				-af abxProjectListFrmeLyt right 5
				-aof abxProjectListFrmeLyt bottom -150
				-ac abxProjectDtlColLyt top 5 abxProjectListFrmeLyt
				-af abxProjectDtlColLyt left 5
				-af abxProjectDtlColLyt right 5
				abxProjectDetailsForm;
			
			paneLayout -e -paneSize 1 50 100 abxProjectMainPane;

			showWindow abxProjectWindow;

			// CB - don't defer this, user is waiting
			//evalDeferred("abxProjectSelectCurrentProject");
			eval("abxProjectSelectCurrentProject");
		}

		else {

			showWindow abxProjectWindow;
			abxProjectSelectCurrentProject;
		}
	}

}



global proc abxProjectEditDefaults () {

	string $projs[] = `treeView -q -si abxProjectProjectList`;
	string $workspace = $projs[0];

	if ($workspace != ""){

		string $tokenBuffer[];
		tokenize $workspace "/" $tokenBuffer;
		if ($tokenBuffer[size($tokenBuffer)-1] != "")
			$workspaceName = $tokenBuffer[size($tokenBuffer)-1];
		else
			$workspaceName = $tokenBuffer[size($tokenBuffer)-2];

		string $detailsFile = ($workspace+"scenes/"+$workspaceName+"_defaults.txt");
		// if a details file doesn't exist then set the values to some default defaults
		if (!`filetest -r $detailsFile`){
			textFieldGrp -e -text 24 abxProjectDtlFPS;
			floatFieldGrp -e -v1 1920 -v2 1080 abxProjectDtlRes;
			floatFieldGrp -e -v1 0.980 -v2 0.551  abxProjectDtlAperture;
			textFieldGrp -e -text "1.0" abxProjectDtlAspect;
			textFieldGrp -e -text "realWorld" abxProjectDtlScale;
			textFieldGrp -e -text "vray" abxProjectDtlRenderer;	
			textFieldGrp -e -text "sRGB"  abxProjectDtlCSpace;		
		}
		// enable the controls
		if (`button -q -l abxProjectEditDefaultsBtn` != "Cancel"){
			textFieldGrp -e -editable true abxProjectDtlFPS;

			floatFieldGrp -e -en1 1 -en2 1 abxProjectDtlRes;
			floatFieldGrp -e -en1 1 -en2 1  abxProjectDtlAperture;
			textFieldGrp -e -editable 1 abxProjectDtlAspect;
			textFieldGrp -e -editable 1 abxProjectDtlScale;
			textFieldGrp -e -editable 1 abxProjectDtlRenderer;
			textFieldGrp -e -editable 1  abxProjectDtlRWidth;
			textFieldGrp -e -editable 1  abxProjectDtlRHeight;
			textFieldGrp -e -editable 1  abxProjectDtlCSpace;

			button -e -vis 1 abxProjectApplyDefaultsBtn;
			button -e -l "Cancel" abxProjectEditDefaultsBtn;


		}
		else {
			textFieldGrp -e -editable 0 abxProjectDtlFPS;

			floatFieldGrp -e -en1 0 -en2 0 abxProjectDtlRes;
			floatFieldGrp -e -en1 0 -en2 0  abxProjectDtlAperture;
			textFieldGrp -e -editable 0 abxProjectDtlAspect;
			textFieldGrp -e -editable 0 abxProjectDtlScale;
			textFieldGrp -e -editable 0 abxProjectDtlRenderer;
			textFieldGrp -e -editable 0  abxProjectDtlRWidth;
			textFieldGrp -e -editable 0  abxProjectDtlRHeight;
			textFieldGrp -e -editable 0  abxProjectDtlCSpace;

			button -e -vis 0 abxProjectApplyDefaultsBtn;
			button -e -l "Edit Defaults" abxProjectEditDefaultsBtn;
			abxProjectSetActiveProject $workspace 1;	
		}
	}

	// show the apply button

}

global proc abxProjectApplyDefaults () {
	// save the settings from the form

	string $lock = "";
	int $fps = 0;
	int $w = 0;
	int $h = 0;
	float $hA = 0;
	float $hV =  0;
	float $aspect = 0;
	string $sceneScale = "";
	string $renderer = "";

	$projs = `treeView -q -si abxProjectProjectList`;


	if ($projs[0] != ""){
		string $prjDetails[] = abxProjectGetShotDetails($projs[0]);


		//print ("// startDetails\n");
		//print $prjDetails;

		$lock = "false";
		$fps = `textFieldGrp -q -text abxProjectDtlFPS`;
		$w = `floatFieldGrp -q -v1 abxProjectDtlRes`;
		$h = `floatFieldGrp -q -v2 abxProjectDtlRes`;
		$hA = `floatFieldGrp -q -v1 abxProjectDtlAperture`;
		$hV = `floatFieldGrp -q -v2 abxProjectDtlAperture`;
		$aspect = `textFieldGrp -q -text abxProjectDtlAspect`;
		$sceneScale = `textFieldGrp -q -text abxProjectDtlScale`;
		$renderer = `textFieldGrp -q -text abxProjectDtlRenderer`;
		$rWidth = `textFieldGrp -q -text abxProjectDtlRWidth`;
		$rHeight = `textFieldGrp -q -text abxProjectDtlRHeight`;
		$cSpace = `textFieldGrp -q -text abxProjectDtlCSpace`;

		$prjDetails[0] = $lock;
		$prjDetails[1] = $fps;
		$prjDetails[2] = $w;
		$prjDetails[3] = $h;
		$prjDetails[5] = $hA;
		$prjDetails[6] = $hV;
		$prjDetails[4] = $aspect;
		$prjDetails[7] = $sceneScale;
		$prjDetails[8] = $renderer;
		$prjDetails[9] = $rWidth;
		$prjDetails[10] = $rHeight;
		$prjDetails[11] = $cSpace;

		abxProjectWriteShotDetails $projs[0] $prjDetails;	
		abxProjectWriteShotLog $projs[0] "Default" "Editing Default Settings";	

		frameLayout -e -en 1 abxProjectDefaultsLyt;

		
	}
	else {
		frameLayout -e -en 0 abxProjectDefaultsLyt;
	}


	// hide the apply button
	textFieldGrp -e -editable 0 abxProjectDtlFPS;

	floatFieldGrp -e -en1 0 -en2 0 abxProjectDtlRes;
	floatFieldGrp -e -en1 0 -en2 0  abxProjectDtlAperture;
	textFieldGrp -e -editable 0 abxProjectDtlAspect;
	textFieldGrp -e -editable 0 abxProjectDtlScale;
	textFieldGrp -e -editable 0 abxProjectDtlRenderer;


	button -e -vis 0 abxProjectApplyDefaultsBtn;
	button -e -l "Edit Defaults" abxProjectEditDefaultsBtn;

}



global proc int abxProjectTreeViewDblClk (string $itemName){
	return true;
}

global proc int abxProjectTreeSetProject (string $itemName){
	
	string $selProj[] = `treeView -q -si abxProjectProjectList`;
	if (size($selProj) > 0){
		abxProjectSetProjectToSelected;
		eval("window -e -vis 0 abxProjectWindow;");
		return true;
	}
	else {
		return false;
	}
}


global proc abxProjectSelectCurrentProject () {
		
	string $curWorkspace = `workspace -q -rd`;
	string $tokenBuffer[];
	tokenize $curWorkspace "/" $tokenBuffer;
	if (size($tokenBuffer) == 4){
		//print ($tokenBuffer[0]+"/"+$tokenBuffer[1]+"\n");
		treeView -e -selectItem ($tokenBuffer[0]+"/"+$tokenBuffer[1]) 1 abxProjectJobList;
		treeView -e -showItem ($tokenBuffer[0]+"/"+$tokenBuffer[1]) abxProjectJobList;
		abxProjectRefreshProjectList ($tokenBuffer[0]+"/"+$tokenBuffer[1]);
		treeView -e -selectItem $curWorkspace 1 abxProjectProjectList;
		treeView -e -showItem $curWorkspace abxProjectProjectList;
	}


}

global proc abxProjectBuildMenu (string $shotLister){


}

global proc abxProjectPopulateList () {

	string $ppJobServers = `getenv PP_JOB_SERVERS`;
	string $ppServers[];
	tokenize $ppJobServers ";" $ppServers;

	for ($each in $ppServers){
		// get the drive letter if any
		string $tokenBuffer[];
		tokenize $each ":" $tokenBuffer;
		string $driveLetter = "";
		string $serverNickName = "";
		if (size($tokenBuffer)>1){
			$driveLetter = $tokenBuffer[0];
			switch ($driveLetter){
				case "M":
					$serverNickName = "Moon";
					break;
				case "N":
					$serverNickName = "Neon";
					break;
				case "P":
					$serverNickName = "Monkey";
					break;
				case "S":
					$serverNickName = "Secret";
					break;
				default:
					$serverNickName = `basename $each ""`;
			}
		}
		else {
			$serverNickName = `basename $each ""`;
		}
		string $jobsPath = ($each);
		//print ($jobsPath+"\n");
		string $jobFolders[] = `getFileList -folder ($jobsPath)`;
		string $alphabetical[] = sort($jobFolders);

		treeView -e -addItem $serverNickName "" abxProjectJobList;
		treeView -e -ei $serverNickName 0 abxProjectJobList;
		treeView -e -selectionColor $serverNickName .8 .8 .8 abxProjectJobList;
		int $i = 0;

		for ($every in $alphabetical){
			if (`filetest -d ($jobsPath+$every)` && $every != "TEMP" && $every != ".TemporaryItems" && $every != ".Trashes"){
				treeView -e -addItem ($each+$every) $serverNickName abxProjectJobList;
				treeView -e -displayLabel ($each+$every) $every abxProjectJobList;
				treeView -e -selectionColor ($each+$every) .8 .8 .8 abxProjectJobList;
				if ($i%2)
					treeView -e -lbc ($each+$every) .2 .2 .2 abxProjectJobList;
				else 
					treeView -e -lbc ($each+$every) .24 .24 .24 abxProjectJobList;
				//treeView -e -bti $each 1 "A" -bti $each 2 "F" -bti $each 3 "L" abxProjectJobList;
				$i++;
			}			
		}
	}

}

global proc abxProjectRefreshProjectList (string $jobName) {
		treeView -e -removeAll abxProjectProjectList;
		int $foundDefault = false;

		string $projFolders[] = `getFileList -folder ($jobName+"/3D/")`;
		string $tokenBuffer[];
		tokenize $jobName "/" $tokenBuffer;
		string $tokenBuffer2[];
		tokenize $tokenBuffer[size($tokenBuffer)-1] "_" $tokenBuffer2;
		string $client = $tokenBuffer2[0];
		string $job = $tokenBuffer2[1];
		for ($each in $projFolders){
			if (`filetest -d ($jobName+"/3D/"+$each)` && $each != "TEMP" && $each != ".TemporaryItems" && $each != ".Trashes" && $each != "old"){
				string $projSubFolders[] = `getFileList -folder ($jobName+"/3D/"+$each+"/")`;
				if (stringArrayContains("workspace.mel",$projSubFolders)){
					treeView -e -addItem ($jobName+"/3D/"+$each+"/") $jobName abxProjectProjectList;
					treeView -e -displayLabel ($jobName+"/3D/"+$each+"/") ($each) abxProjectProjectList;
					treeView -e -selectionColor ($jobName+"/3D/"+$each+"/") .8 .8 .8 abxProjectProjectList;
					if (tolower($jobName+"/3D/"+$each+"/") == tolower($jobName+"/3D/"+$client+"_"+$job+"_maya/")){
						treeView -e -si ($jobName+"/3D/"+$each+"/") 1 abxProjectProjectList;
						abxProjectSetActiveProject ($jobName+"/3D/"+$each+"/") 1;
						//print ("enabled button\n");
						button -e -en 1 abxProjectBtnRefresh;
						abxProjectRefreshDetailsUI2 ($jobName+"/3D/"+$each+"/");
						treeView -e -displayLabel ($jobName+"/3D/"+$each+"/") ($each+"   (default)") abxProjectProjectList;
						$foundDefault = true;
					}
				}
			}
		}

}
global proc int abxProjectSetActiveJob (string $jobName, int $state) {


	if ($state == 1){
		treeView -e -textColor $jobName .2 .2 .2 abxProjectJobList;
		//print ("disabled button\n");
		button -e -en 0 abxProjectBtnRefresh;
		abxProjectRefreshDetailsUI2 ("");
		abxProjectRefreshDetailsUI $jobName;
		//print ("set job to "+$jobName+"\n");

		// refresh the details
		
	}
	else {
		treeView -e -textColor $jobName .8 .8 .8 abxProjectJobList;
	}
	return  1;

}

global proc int abxProjectSetActiveProject (string $projName, int $state) {


	if ($state == 1){
		treeView -e -textColor $projName .2 .2 .2 abxProjectProjectList;
		//abxProjectRefreshDetailsUI $jobName;
		//print ("set job to "+$jobName+"\n");
		button -e -en 1 abxProjectBtnRefresh;
		abxProjectRefreshDetailsUI2 ($projName);

	}
	else {
		treeView -e -textColor $projName .8 .8 .8 abxProjectProjectList;
	}
	return 1;

}

global proc abxProjectRefreshDetailsUI (string $jobName) {
	abxProjectRefreshProjectList $jobName;
	

}

global proc abxProjectSetProjectToSelected () {
	workspace -openWorkspace `treeView -q -si abxProjectProjectList`;
	string $projects[] = `treeView -q -si abxProjectProjectList`;
	print ("Set Project to "+$projects[0]+"\n");
	if (`window -q -exists abxShotsWindow`){
	
		abxShotsPopulateList "_ALL_SHOTS" "abxShotsList";
	
	}
}

global proc abxProjectWriteShotDetails (string $workspace, string $projDetails[]){

	string $tokenBuffer[];
	tokenize $workspace "/" $tokenBuffer;
	if ($tokenBuffer[size($tokenBuffer)-1] != "")
		$workspaceName = $tokenBuffer[size($tokenBuffer)-1];
	else
		$workspaceName = $tokenBuffer[size($tokenBuffer)-2];

	string $detailsFile = ($workspace+"scenes/"+$workspaceName+"_defaults.txt");
	
	if (size($projDetails) > 8){	

		$fileId=`fopen $detailsFile "w"`;

		fprint $fileId ("abxProjectVersion=1.0\n");
		fprint $fileId ("lock="+$projDetails[0]+"\n");
		fprint $fileId ("framerate="+$projDetails[1]+"\n");
		fprint $fileId ("width="+$projDetails[2]+"\n");
		fprint $fileId ("height="+$projDetails[3]+"\n");
		fprint $fileId ("aspect="+$projDetails[4]+"\n");
		fprint $fileId ("hAperture="+$projDetails[5]+"\n");
		fprint $fileId ("vAperture="+$projDetails[6]+"\n");
		fprint $fileId ("sceneScale="+$projDetails[7]+"\n");
		fprint $fileId ("renderer="+$projDetails[8]+"\n");
		if (size($projDetails) > 10){
			fprint $fileId ("renderWidth="+$projDetails[9]+"\n");
			fprint $fileId ("renderHeight="+$projDetails[10]+"\n");
		}
		if (size($projDetails) > 11){
			fprint $fileId ("colorspace="+$projDetails[11]+"\n");
		}

		fclose $fileId;

	}
	else {
		print ("Project details not written, incorrect number of elements in project detail array\n");
	}

}


global proc string[] abxProjectGetShotDetails (string $workspace) {
	
	string $tokenBuffer[];
	tokenize $workspace "/" $tokenBuffer;
	if ($tokenBuffer[size($tokenBuffer)-1] != "")
		$workspaceName = $tokenBuffer[size($tokenBuffer)-1];
	else
		$workspaceName = $tokenBuffer[size($tokenBuffer)-2];

	string $detailsFile = ($workspace+"scenes/"+$workspaceName+"_defaults.txt");
	print ($detailsFile+"\n");
	string $shotDetails[];
	string $headerData="";
	string $nextLine="";
	string $tokenBuffer[];
	

	if (`filetest -f ($detailsFile)`){
		 $fileId=`fopen $detailsFile "r"`;
			
			$nextLine = `fgetline $fileId`;
			tokenize $nextLine "=" $tokenBuffer;
			string $abxProjectVersion = strip($tokenBuffer[1]);
			//print ("ver is "+$abxProjectVersion+"\n");

			int $index = 0;
			while (size($nextLine) > 0){
				
 				$nextLine = `fgetline $fileId`;
				tokenize $nextLine "=" $tokenBuffer;
				$shotDetails[$index] = strip($tokenBuffer[1]);
				$index++;
			}
 		fclose $fileId;
		return $shotDetails;
	}
	else{
		//print ($detailsFile+" File not Found. Ignoring.\n");
		return {""};
	}
	
	

}

global proc abxProjectRefreshDetailsUI2 (string $workspace){

	string $lock = "";
	int $fps = 0;
	int $w = 0;
	int $h = 0;
	float $hA = 0;
	float $hV =  0;
	float $aspect = 0;
	string $sceneScale = "";
	string $renderer = "";
	float $renderW = 0;
	float $renderH = 0;
	string $colorSpace = "";

	if ($workspace != ""){
		string $prjDetails[] = abxProjectGetShotDetails($workspace);
		if (size($prjDetails)>7){
			//print ("// startDetails\n");
			//print $prjDetails;
			$lock = $prjDetails[0];
			$fps = $prjDetails[1];
			$w = $prjDetails[2];
			$h = $prjDetails[3];
			$hA = $prjDetails[5];
			$hV =  $prjDetails[6];
			$aspect = $prjDetails[4];
			$sceneScale = $prjDetails[7];
			$renderer = $prjDetails[8];
			if (size($prjDetails) > 9){
				$renderW = $prjDetails[9];
				$renderH = $prjDetails[10];
			}
			if (size($prjDetails) > 10){
				$colorSpace = $prjDetails[11];
			}
			//frameLayout -e -en 1 abxProjectDefaultsLyt;

		}
		else {
			$lock = "";
			$fps = 0;
			$w = 0;
			$h = 0;
			$hA = 0;
			$hV =  0;
			$aspect = 0;
			$sceneScale = "";
			$renderer = "";	
			$renderW = 0;
			$renderH = 0;		
			$colorSpace = "";
		}
	}
	else {
			$lock = "";
			$fps = 0;
			$w = 0;
			$h = 0;
			$hA = 0;
			$hV =  0;
			$aspect = 0;
			$sceneScale = "";
			$renderer = "";
			$renderW = 0;
			$renderH = 0;	
			$colorSpace = "";	
		//frameLayout -e -en 0 abxProjectDefaultsLyt;
	}

	textFieldGrp -e -text $fps -editable 0 abxProjectDtlFPS;
	floatFieldGrp -e -v1 $w -v2 $h -en1 0 -en2 0 abxProjectDtlRes;
	floatFieldGrp -e -v1 $hA -v2 $hV -en1 0 -en2 0 abxProjectDtlAperture;
	textFieldGrp -e -text  $aspect -editable 0 abxProjectDtlAspect;
	textFieldGrp -e -text $sceneScale -editable 0 abxProjectDtlScale;
	textFieldGrp -e -text  $renderer -editable 0 abxProjectDtlRenderer;
	textFieldGrp -e -text  $renderW -editable 0 abxProjectDtlRWidth;
	textFieldGrp -e -text  $renderH -editable 0 abxProjectDtlRHeight;
	textFieldGrp -e -text  $colorSpace -editable 0 abxProjectDtlCSpace;

	button -e -vis 0 abxProjectApplyDefaultsBtn;
	button -e -l "Edit Defaults" abxProjectEditDefaultsBtn;
}

global proc abxProjectCreateNewJobUI (){

	// open dialog window to prompt user the location and name of new job and job number

	if (!`window -exists abxProjectCreateWindow`){
		window -t "New Job" -width 500 -height 200 abxProjectCreateWindow;
		formLayout abxProjectNewJobUIFrmLyt;
		frameLayout -lv 0 -borderStyle "out" abxProjectNewJobFrmeLyt;
		columnLayout -rowSpacing 3;
		separator -h 20 -style "none";
		optionMenuGrp -label "Servers:" -columnWidth 2 80 -cw 3 100 -cc abxProjectUpdateNewJobUI abxProjectCreateTypeOM;
			string $jobServerNames[] = abxProjectsGetServers(1);
			string $jobServers[] =  abxProjectsGetServers(0);
			for ($i=0;$i<size($jobServers);$i++){
				menuItem -label ($jobServerNames[$i]+" ("+$jobServers[$i]+")");
			}
		

		// asset name
		rowLayout -numberOfColumns 4 -columnWidth 1 141 -columnAttach 1 "right" 0 abxProjectClientNameRL;
			text -label "Client:";
			text -label "" abxProjectSeqLbl;
			textField -cc "abxProjectUpdateNewJobUI" -text "" abxProjectClientNameTF;
		setParent ..;

		rowLayout -numberOfColumns 4 -columnWidth 1 141 -columnAttach 1 "right" 0 abxProjectJobNameRL;
			text -label "Job Name:";
			text -label "" abxProjectSeqLbl;
			textField -cc "abxProjectUpdateNewJobUI" -text "" abxProjectJobNameTF;
		setParent ..;

		rowLayout -numberOfColumns 4 -columnWidth 1 141 -columnAttach 1 "right" 0 abxProjectJobNumRL;
			text -label "Job Number:";
			text -label "" abxProjectSeqLbl;
			textField -cc "abxProjectUpdateNewJobUI" -text "" abxProjectJobNumTF;
		setParent ..;

		rowLayout -numberOfColumns 2 -columnWidth 1 141 -columnAttach 1 "right" 0;
			text -label "Path:";
			text -label ($jobServers[0]) abxProjectNewShotPath;
		//textFieldGrp -label "Shot Name:" -text  "S1_010"  abxProjectCreateTFName;

		// asset method

		setParent abxProjectNewJobUIFrmLyt;

		rowLayout -numberOfColumns 3 -columnWidth3 160 160 160 -columnAttach 1 "both" 0 -columnAttach 2 "both" 0 -columnAttach 3 "both" 0 abxProjectNewShotRL;
		button -label "Create" -h 25 -c "abxProjectCreateShotUI `optionMenuGrp -q -v abxProjectCreateTypeOM` (`optionMenuGrp -q -v abxProjectCreateOMTmpl`+\"/\"+`optionMenuGrp -q -v abxProjectCreateOMTmpl`+\"_\"+`textField -q -text abxProjectCreateTFName`);window -e -vis 0 abxProjectCreateWindow;" ;
		button -label "Apply" -h 25 -c "abxProjectCreateShotUI `optionMenuGrp -q -v abxProjectCreateTypeOM` (`optionMenuGrp -q -v abxProjectCreateOMTmpl`+\"/\"+`optionMenuGrp -q -v abxProjectCreateOMTmpl`+\"_\"+`textField -q -text abxProjectCreateTFName`);";
		button -label "Cancel" -h 25 -c "window -e -vis 0 abxProjectCreateWindow";

		formLayout -e 
			-af abxProjectNewJobFrmeLyt "left" 5
			-af abxProjectNewJobFrmeLyt "top" 5
			-af abxProjectNewJobFrmeLyt "bottom" 34
			-af abxProjectNewJobFrmeLyt "right" 5

			-af abxProjectNewShotRL "left" 5
			-ac abxProjectNewShotRL  "top" 5 abxProjectNewJobFrmeLyt
			-af abxProjectNewShotRL "bottom" 5
			-af abxProjectNewShotRL "right" 5
			abxProjectNewJobUIFrmLyt;
			
		showWindow abxProjectCreateWindow;
	}
	else {
		showWindow abxProjectCreateWindow;
	}

	// copy a template directory structure to the path specified

	// rename the job directory to match values input by user

	// lock root of job so new folder or files aren't possible

}

// 
global proc abxProjectUpdateNewJobUI (){

	int $jobServerIndex = `optionMenuGrp -q -sl abxProjectCreateTypeOM` - 1;
	string $jobServers[] =  abxProjectsGetServers(0);

	text -e -label ($jobServers[$jobServerIndex]+`textField -q -text abxProjectClientNameTF`+"_"+`textField -q -text abxProjectJobNameTF`+"_"+`textField -q -text abxProjectJobNumTF`+"/") "abxProjectNewShotPath";

}


global proc abxProjectCreateNewMayaProject (){

	// open dialog window to prompt user the location and name of new job and job number

	// copy a template directory structure to the path specified

	// rename the project directory to match values input by user

	// lock root of maya project so new folders or files aren't possible


}


global proc string[] abxProjectsGetServers(int $returnNicknames){

	string $ppJobServers = `getenv PP_JOB_SERVERS`;
	string $ppServers[];
	tokenize $ppJobServers ";" $ppServers;

	if ($returnNicknames == 0){
		return $ppServers;
	}
	else{
	// get server nicknames
		string $serverNickNames[];
		for ($i=0;$i<size($ppServers);$i++){
			$each = $ppServers[$i];
			// get the drive letter if any
			string $tokenBuffer[];
			tokenize $each ":" $tokenBuffer;
			string $driveLetter = "";
			if (size($tokenBuffer)>1){
				$driveLetter = $tokenBuffer[0];
				switch ($driveLetter){
					case "M":
						$serverNickNames[$i] = "Moon";
						break;
					case "N":
						$serverNickNames[$i] = "Neon";
						break;
					case "P":
						$serverNickNames[$i] = "Monkey";
						break;
					default:
						$serverNickNames[$i] = `basename $each ""`;
				}
			}
			else {
				$serverNickNames[$i] = `basename $each ""`;
			}
		}
		return $serverNickNames;
	}

}
global proc abxProjectCreateProjectProc (){
	string $result = `layoutDialog -title "New Maya Project" -ui "abxProjectNewProjectDialog"`;
	//print ($result+"\n");
	$selJobs = `treeView -q -si abxProjectJobList`;
	string $projPath = toNativePath($selJobs[0]+"/3D/");
	string $projName;
	if (`gmatch $result "Create:client_job_maya"` || $result == "Create:"){

		string $tokenBuffer[];
		tokenize $result ":" $tokenBuffer;
		$projName = $tokenBuffer[1];

		string $tokenBuffer2[];
		string $job = $selJobs[0];
		tokenize $job "/" $tokenBuffer2;
		$jobName = $tokenBuffer2[size($tokenBuffer2)-1];
		string $tokenBuffer3[];
		tokenize $jobName "_" $tokenBuffer3;

		$projName = ($tokenBuffer3[0]+"_"+$tokenBuffer3[1]+"_maya");
	}
	else if (`gmatch $result "Create:*"`){
		string $tokenBuffer[];
		tokenize $result ":" $tokenBuffer;
		$projName = $tokenBuffer[1];

	}
	else if ($result == "Cancel") {
		$projName = "";
		$projPath = "";
		return;
		
	}

	if ($projName != ""){
		string $text = $projName;
		string $tokenBuffer[];
		// remove any space
		tokenize $text " " $tokenBuffer;
		if (size($tokenBuffer)> 1){
			$text = $tokenBuffer[0];
			int $i = 0;
			for ($i=1;$i<size($tokenBuffer);$i++){
				int $l = size($tokenBuffer[$i]);
				string $capLetter = toupper(`substring $tokenBuffer[$i] 1 1`);
				string $rest = "";
				if (size($tokenBuffer[$i])>1)
					$rest = `substring $tokenBuffer[$i] 2 $l`;
				$text += ($capLetter+$rest);
			}
		}
		$projName = $text;


		string $templateProj = toNativePath("M:/TEMP/_EMPTY_JOB_TEMPLATE/3D/client_job_maya");
		if(!`filetest -d ($projPath+$projName)`){
			// if the template exists
			if (`filetest -d $templateProj`){
				$projName = toNativePath($projName+"/");
				string $cmd = ("system(\"xcopy /E \\\""+encodeString($templateProj)+"\\\" \\\""+encodeString($projPath+$projName)+"\\\"\")");
				evalEcho($cmd);
				//sysFile -cp $templateProj ($projPath+$projName);

			}
			else {
				error("Maya Project Template not found in:"+$templateProj);
			}
				// copy the template dir to the job folder
			// 
		}
		else {
			error ("Maya Project: \""+($projPath+$projName)+"\" Already Exists");
		}
	}	
	else {
		error ("No Project Name Specified");
	}

	abxProjectSetActiveJob $selJobs[0] 1;

	//M:\TEMP\_EMPTY_JOB_TEMPLATE\3D\client_job_maya

}


global proc abxProjectNewProjectDialog (){

    // Get the dialog's formLayout.
    //
    string $form = `setParent -q`;

    // layoutDialog's are not resizable, so hard code a size here,
    // to make sure all UI elements are visible.
    //
    //int $start = `floatFieldGrp -q -v1 abxProjectDtlRange`;
    //int $end = `floatFieldGrp -q -v2 abxProjectDtlRange`;

    formLayout -e -width 300 -height 125 $form;

    //string $t = `floatFieldGrp -en1 1 -en2 1 -cw 1 80 -cw 2 100 -cw 3 100 -nf 2 -label "Start/End:" -v1 $start -v2 $end frangeEditFFG`;
    string $t = `columnLayout -adjustableColumn true`;
    	radioCollection abxProjectNewProjectRC;
    	rowLayout -nc 2 -cw 1 70;
    		separator -style "none";
			radioButton -sl -label "Make Default Maya Project" -cc "textFieldGrp -e -en 0 -text \"\" abxProjectNewProjectRCAName" abxProjectNewProjectRCD;
			setParent ..;
    	rowLayout -nc 2 -cw 1 70;
    		separator -style "none";
    		radioButton -label "Make Alternate Maya Project" -cc "textFieldGrp -e -en 1 abxProjectNewProjectRCAName" abxProjectNewProjectRCA;
    		setParent ..;
    	
    textFieldGrp -en 0 -label "Alternate Name:" -text "client_job_maya" abxProjectNewProjectRCAName;

    setParent $form;

    string $b1 = `button -l "Create" -c "layoutDialog -dismiss (\"Create:\"+`textFieldGrp -q -text abxProjectNewProjectRCAName`);"`;
    string $b2 = `button -l "Cancel"     -c "layoutDialog -dismiss \"Cancel\""`;


    int $spacer = 5;
    int $top = 5;
    int $edge = 5;

    formLayout -edit
        -attachForm            $t   "top"    ($top+10)
        -attachForm            $t   "left"   $edge
        -attachNone            $t   "bottom"
        -attachForm            $t   "right"  $edge

        -attachOppositeForm    $b1  "top" (-25-$spacer)
        -attachForm            $b1  "left"   $edge
        -attachNone            $b1  "bottom"
        -attachPosition        $b1  "right"  $spacer 50

        -attachOppositeForm    $b2  "top"    (-25-$spacer)
        -attachPosition        $b2  "left"   $spacer 50
        -attachNone            $b2  "bottom"
        -attachForm            $b2  "right" $edge

 

    $form;

	// use default radio button
	// use alternate radio button with a text field for the alternate name
	// OK button 
	// Cancel button

}

global proc abxProjectWriteShotLog (string $workspace, string $updateWhat, string $note){

	// shot base name
	string $workspaceName = basenameEx($workspace);
	if (!`filetest -d ($workspace+"data/log")`)
		sysFile -makeDir ($workspace+"data/log");

	string $logFile = ($workspace+"data/log/"+$workspaceName+"_log.txt");
	//print ($logFile+"\n");
	while (size($updateWhat)<10){
		$updateWhat+=" ";
	}
	string $date = `date`;
	
	string $user = `getenv USER`;
	while (size($user)<10){
		$user+=" ";
	}	
	$fileId=`fopen $logFile "a"`;
		fprint $fileId ($date+"\t"+$updateWhat+"\t"+$user+"\t"+$note+"\n");
	fclose $fileId;



}

