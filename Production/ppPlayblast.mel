// ppPlayblast
// Created by: adam
// Date: 2012/03/08 14:50:03



// playblasts the current scene using assumptions about the open scene to guess where to save the playblast. Otherwise it playblasts to a temp location
global proc ppPlayblast(){

	updateTimeSliderMenu "MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|TimeSliderMenu";
	if (`menu -exists "TimeSliderMenu"`){
		if (`menuItem -q -exists "ppAutoPlayblastMenuItem"`){
			deleteUI -menuItem "ppAutoPlayblastMenuItem";
			deleteUI -menuItem "ppAutoPlayblastDivItem";
		}
		else{
			setParent -menu TimeSliderMenu;
			menuItem -divider true ppAutoPlayblastDivItem;
			menuItem -label "PP Auto Playblast" -c "ppPlayblastDoCurrentScene 2" ppAutoPlayblastMenuItem;
		}
	}
} 
global proc ppPlayblastDoCurrentScene(string $doCommit){

	
	// determine the shot
	string $currentScene = `file -q -sn`;
	string $currentSceneName = `basenameEx $currentScene`;

	// 0:Server 1:Job 2:ShotFolder 3:Seq 4:Shot 5:dept 6:subDept 7:take 8:version 9:ext
	string $shotInfo[] = abxShotsGetFromPath($currentScene);
	
	/*
	string $shotNameGuess = "";
	string $shotTakeGuess = "";
	string $shotDeptGuess = "";
	string $shotSubDeptGuess = "";
	string $shotSequenceGuess = "";
	string $shotFolderGuess = "";
	string $extension = `fileExtension $currentScene`;
	
	
	string $tokenBuffer[];
	tokenize $currentScene "/" $tokenBuffer;
	if (size($tokenBuffer) > 1){
		$subDeptGuess = $tokenBuffer[size($tokenBuffer)-2];
		if (size($tokenBuffer) > 2 ) {
			$shotDeptGuess = tolower($tokenBuffer[size($tokenBuffer)-3]);
			if (size($tokenBuffer) > 3 ) {
				$shotNameGuess = $tokenBuffer[size($tokenBuffer)-4];
				if (size($tokenBuffer) > 4){
					if ($tokenBuffer[size($tokenBuffer)-5] != "_ALL_SHOTS" && $tokenBuffer[size($tokenBuffer)-5] != "_PREVIS"){
						$shotSequenceGuess = $tokenBuffer[size($tokenBuffer)-5];
						if ($tokenBuffer[size($tokenBuffer)-6] == "_ALL_SHOTS" || $tokenBuffer[size($tokenBuffer)-6] == "_PREVIS" ){
							$shotFolderGuess = $tokenBuffer[size($tokenBuffer)-6];
						}	
					}
					else{
						$shotFolderGuess = $tokenBuffer[size($tokenBuffer)-5];
					}
				}
			}
		}
	}	
	*/

	//print ("sceneFileName="+$currentSceneName+" shotNameGuess="+$shotNameGuess+" deptGuess ="+$shotDeptGuess+" shotSequenceGuess="+$shotSequenceGuess+"\n");

	//set the playblast variables
	string $renderPath = ($shotInfo[0]+"/"+$shotInfo[1]+"/RENDER/"+$shotInfo[2]+"/");
	string $pbPath  = ($renderPath+$shotInfo[3]+"/"+$shotInfo[3]+"_"+$shotInfo[4]+"/playblasts/"+$currentSceneName);
	//string $renderPath = (`workspace -q -rd`+"../../RENDER/"+$shotFolderGuess+"/");

	int $imgWidth = 1920;
	int $imgHeight = 1080;
	float $aspect = 1;

	// check for project defaults file and get settings from there
	if (`exists abxProjectGetShotDetails`){
		string $prjDetails[] = abxProjectGetShotDetails(`workspace -q -rd`);
		if (size($prjDetails)>7){
			$lock = $prjDetails[0];
			$fps = $prjDetails[1];
			$imgWidth = $prjDetails[2];
			$imgHeight = $prjDetails[3];
			$hA = $prjDetails[5];
			$hV =  $prjDetails[6];
			$aspect = $prjDetails[4];
			$sceneScale = $prjDetails[7];
			$renderer = $prjDetails[8];
		}	
		else{
			warning("Project Defaults File Not Found. Reverting to 1920 X 1080");
		}
	}
	else {
		warning("abxProject.mel not sourced. Skipping project defaults check.");
	}


	evalEcho("setAttr defaultResolution.width "+$imgWidth);
	evalEcho("setAttr defaultResolution.height "+$imgHeight);
	evalEcho("setAttr defaultResolution.pixelAspect "+$aspect);
	evalEcho("setAttr defaultResolution.deviceAspectRatio "+(float($imgWidth)/float($imgHeight)));


	string $cameraName = "";
	if (`objExists "master:renderCam"`)
		$cameraName = "master:renderCam";
	else if (`objExists "renderCam"`)
		$cameraName = "renderCam";
	else 
		$cameraName = "renderCam";


	string $activePanel = `getPanel -withFocus`; 
	// if the viewport is the stereo panel then switch back to the normal modelPanel 
	if ($activePanel == "StereoPanel") {
		lookThroughModelPanel $cameraName StereoPanel;
		$activePanel = `getPanel -withFocus`; 

	}
	select -clear;
	if (`modelPanel -q -exists $activePanel`){

		if (!`objExists $cameraName`){
			$result = `confirmDialog -title "No renderCam Found" -message "There is no 'renderCam' found. Please rename your main camera to 'renderCam' (case-sensitive)" -button "OK" -defaultButton "OK" -cancelButton "OK" -dismissString "OK"`;
			return;
		}
			//error ($cameraName+" does not exist. Please conform your scene or make your main camera named "+$cameraName+"\n");
		
		setAttr ($cameraName+".overscan") 1;

		lookThroughModelPanel $cameraName $activePanel;
		modelEditor -e -allObjects false -ignorePanZoom true $activePanel;
		modelEditor -e -grid false -cameras true -strokes true -nurbsSurfaces true -polymeshes true -dynamics true -fluids true -nParticles true $activePanel;
		// print (`playblast -ae`+"\n");
	}
	else {
			error ("Please select a viewport to playblast\n");
	}

	// frame range check
	ppPlayblastCheckFrameRange($pbPath);
	
	if ($shotInfo[2] == "_PREVIS" || $shotInfo[2] == "_ALL_SHOTS"){
		if ($shotInfo[3] == ""){
			
			print("LOOKING FOR:"+$pbPath+".mov\n");
			if (`file -q -exists ($pbPath+".mov")`){
				$result = `confirmDialog -title "ppPlayblast" -message ("A Playblast for "+$currentSceneName+" Already Exists. Please increment your scene version and try again.") -button "Abort Playblast" -button "Force Overwrite" -defaultButton "Abort Playblast" -dismissString "Abort Playblast"`;
				if ($result == "Force Overwrite"){
					ppPlayblastDoBlast2 $cameraName $pbPath $currentSceneName "png" `playbackOptions -q -min` `playbackOptions -q -max` $imgWidth $imgHeight $doCommit $shotInfo[3];
				}
			}
			else{		
				ppPlayblastDoBlast2 $cameraName $pbPath $currentSceneName "png" `playbackOptions -q -min` `playbackOptions -q -max` $imgWidth $imgHeight $doCommit $shotInfo[3];
			}
		}
		else {

			//string $pbPath  = ($renderPath+$shotInfo[3]+"/"+$shotInfo[3]+"_"+$shotInfo[4]+"/playblasts/"+$currentSceneName);
			print("LOOKING FOR:"+$pbPath+".mov\n");
			if (`file -q -exists ($pbPath+".mov")`){
				$result = `confirmDialog -title "ppPlayblast" -message ("A Playblast for "+$currentSceneName+" Already Exists. Please increment your scene version and try again.") -button "Abort Playblast" -button "Force Overwrite" -defaultButton "Abort Playblast" -dismissString "Abort Playblast"`;
				if ($result == "Force Overwrite"){
					ppPlayblastDoBlast2 $cameraName $pbPath $currentSceneName "png" `playbackOptions -q -min` `playbackOptions -q -max` $imgWidth $imgHeight $doCommit $shotInfo[3];
				}
			}
			else{
				ppPlayblastDoBlast2 $cameraName $pbPath $currentSceneName "png" `playbackOptions -q -min` `playbackOptions -q -max` $imgWidth $imgHeight $doCommit $shotInfo[3];
			}
		}
	}
	else {
		error ("Could not Auto Playblast current scene. Please save in the pipeline first and try again.");
	}
	modelEditor -e -ignorePanZoom false $activePanel;
}

global proc string ppPlayblastGetPadded (int $inNumber){

	string $result = "";
	if ($inNumber < 10)
		$result = ("000"+$inNumber);
	else if ($inNumber < 100)
		$result = ("00"+$inNumber);
	else if ($inNumber < 1000)
		$result = ("0"+$inNumber);
	else 
		$result = ($inNumber);

	return $result;
}

global proc ppPlayblastDoBlast2 (string $cameraName, string $pbPath, string $pbName, string $ext, int $startFr, int $endFr,int $imgWidth,int $imgHeight, int $doCommit, string $seqName){

	string $cmd;
	string $cmd2;
	string $cmd3;

	int $percent = 50;

	if ($imgHeight < 720 || $imgWidth < 640){
		$percent = 100;
	}
	if ($imgHeight < 250 || $imgWidth < 450){
		$imgHeight = $imgHeight * 2;
		$imgWidth = $imgWidth * 2;
	}
	if ($imgHeight > 2048 || $imgWidth > 2048){
		$percent = 25;
	}

	int $fps = 24;
	// need to get project frame rate
			// check for project defaults file and get settings from there
		if (`exists abxProjectGetShotDetails`){
			string $prjDetails[] = abxProjectGetShotDetails(`workspace -q -rd`);
			if (size($prjDetails)>7){
				$fps = $prjDetails[1];
			}	
			else{
				warning("Project Defaults File Not Found. Reverting to 1920 X 1080");
			}
		}
		else {
			warning("abxProject.mel not sourced. Skipping project defaults check.");
		}
	$localFolder = ("C:/users/"+`getenv USER`+"/Desktop/playblasts");
	if (!`filetest -d $localFolder`)
		sysFile -makeDir $localFolder;

	string $pbFullPath = ($pbPath+"/"+$pbName);
	string $pbTempFullPath = ($localFolder+"/"+$pbName);
	string $pbTempPath = $localFolder;
	string $startFrame = `ppPlayblastGetPadded $startFr`;
	string $endFrame = `ppPlayblastGetPadded $endFr`;
	
	string $ppResource = `getenv PP_RESOURCE`;
	string $fileViewPath = ($ppResource+"/bin/win32/djv/djv-083-pre2_winxp-x86/bin/djv_view.exe");

	// DJV_convert file converter flags (does not support audio) but can do arbitrary image sequences
	string $fileConvertPath = ($ppResource+"/bin/win32/djv/djv-083-pre2_winxp-x86/bin/djv_convert.exe");
	string $fileConvertFlags = "-save quicktime codec jpeg";

	// FFMPEG file Converter and flags, can convert between movie formats but is bad at image sequences
	string $fileConvertPathAlt = ($ppResource+"/bin/win32/ffmpeg/ffmpeg-20120424-git-3bbf3f7-win64-static/bin/ffmpeg");
	string $fileConvertFlagsAlt = "-y -i";
	string $fileConvertFlagsAlt2 = ("-vcodec libx264 -b:v 10000k -f mov -g 1 -r "+$fps);


	string $camShapes[] = `listRelatives -s $cameraName`;
	string $cameraShape = $camShapes[0];


		string $tokenBuffer[];
		tokenize $pbPath "/" $tokenBuffer;
		string $pbNameFolder = $tokenBuffer[size($tokenBuffer)-1];
		int $subSize = size($pbPath) - (size($pbNameFolder)+1);
		string $movServerPath = `substring $pbPath 1 $subSize`;
		string $movPath = $pbTempPath;//`substring $pbTempPath 1 $subSize`;

		//string $sourcePath = ($pbTempFullPath+"."+$startFrame+"."+$ext);
		string $sourcePath = ($pbTempFullPath+".avi");
		string $convertSourcePath = ($pbTempFullPath+".avi");
		string $destMovPath = ($movPath+"/"+$pbName+".mov");

				
		string $sysCmd = ($fileViewPath+" \\\""+$sourcePath+"\\\"");
		string $sysCmdAlt = ($fileViewPath+" \\\""+$destMovPath+"\\\"");
		string $sysCmd2 = ($fileConvertPath+" "+$fileConvertFlags+" \\\""+$convertSourcePath+"\\\" \\\""+$destMovPath+"\\\"");

		string $sysCmd2Alt = ($fileConvertPathAlt+" "+$fileConvertFlagsAlt+" \\\""+$convertSourcePath+"\\\" "+$fileConvertFlagsAlt2+" \\\""+$destMovPath+"\\\"");

			global string $gPlayBackSlider;
			string $soundNode =  `timeControl -q -sound $gPlayBackSlider`;
			
			if ($imgHeight < 480 || $imgWidth < 640){
				$cmd += "print (`playblast -ae`+\"\\n\");playblastHUDResize \"small\";";
			}

			if ($soundNode != "")
				$cmd += ("playblast -fo -format avi -sound \""+$soundNode+"\"  -filename \""+$pbTempPath+"/"+$pbName+"\" -sequenceTime 0 -clearCache 1 -offScreen -viewer 0 -showOrnaments 1 -fp 4 -percent "+$percent+" -compression \"none\" -quality 100 -widthHeight "+$imgWidth+" "+$imgHeight+";\n");
			else
				$cmd += ("playblast -fo -format avi -filename \""+$pbTempPath+"/"+$pbName+"\" -sequenceTime 0 -clearCache 1 -offScreen -viewer 0 -showOrnaments 1 -fp 4 -percent "+$percent+" -compression \"none\" -quality 100 -widthHeight "+$imgWidth+" "+$imgHeight+";\n");

			// get local desktop path
			//$localFolder = ("C:/users/"+`getenv USER`+"/Desktop/playblasts");
			//if (!`filetest -d $localFolder`)
			//	sysFile -makeDir $localFolder;
			$localFile = $destMovPath;//($localFolder+"/"+`basename $destMovPath ""`);
			
			// convert the file to a quicktime h264
			$cmd += ("system(\""+$sysCmd2Alt+"\");\n");

			// copies the new quicktime to the users desktop so it can be opened
			//$cmd += ("sysFile -cp \""+$localFile+"\" \""+$destMovPath+"\";\n");

			// copies the new quicktime to the server location $pbpath
			$cmd += ("if (!`filetest -r \""+$movServerPath+"\"`) sysFile -makeDir \""+$movServerPath+"\";\n");
			$cmd += ("sysFile -cp \""+$movServerPath+"/"+$pbName+".mov"+"\" \""+$localFile+"\";\n");

			// loads up the converted quicktime
			$cmd += ("system(\"load "+$localFile+"\");\n");

			//print ("system("+$sysCmd2+"\");
			//print ("ppPlayblastsCommitToEditorAlt \""+$pbPath+"\" \""+$destMovPath+"\";");
			if($doCommit != 0) {
				$cmd += ("ppPlayblastsCommitToEditorAlt \""+$pbPath+"\" \""+$convertSourcePath+"\" "+$doCommit+" \""+$seqName+"\";");
			}
            else {
            	// deletes the .avi file if since it is no longer needed. if commit did happen it would only be deleted after converting for commit to edit
				$cmd += ("system(\"del \\\""+encodeString(toNativePath($sourcePath))+"\\\"\");\n");
            	//$cmd += ("system(\"del /Q \\\""+$pbTempFullPath+"\\\"\");\n");
	        	//$cmd += ("system(\"rmdir \\\""+$pbTempFullPath+"\\\"\");\n");
            }			

			if ($imgHeight < 720 || $imgWidth < 640){
				$cmd += "playblastHUDResize \"large\";";
			}			

			// run the playblast command as deferred evaluation
			print ($cmd);
			eval($cmd);
}

global proc ppPlayblastsCommitToEditorAlt(string $pbPath, string $sourcePath, int $force, string $seq){
    
	// 0:Server 1:Job 2:ShotFolder 3:Seq 4:Shot 5:dept 6:subDept 7:take 8:version 9:ext
	string $shotInfo[] = abxShotsGetFromPath(`file -q -sn`);

	string $scenePath = `file -q -sn`;
	string $scenePath = `workspace -pp $scenePath`;
	string $tokenBuffer[];
	tokenize $scenePath "/" $tokenBuffer;
	
	string $shotsFolder = $tokenBuffer[1];
	// string $seq = $tokenBuffer[2];
	string $shotName = $tokenBuffer[3];
	string $deptName = $tokenBuffer[4];

    string $result;
    if($force == 2)    
	  $result = `confirmDialog -title "Commit Playblast" -message "Submit the playblast to editors?" -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"`;
	if($force == 1)
	  $result = "Yes";
	if($force == 0)
	    $result = "No";

	string $ppResource = `getenv PP_RESOURCE`;
	string $fileConvertPathAlt = ($ppResource+"/bin/win32/ffmpeg/ffmpeg-20120424-git-3bbf3f7-win64-static/bin/ffmpeg");
	string $fileConvertFlagsAlt = "-y -i";
	string $fileConvertFlagsAlt2 = "-vcodec prores -qmin 1 -qmax 1";

	if ($result == "Yes"){
		if (`about -os` == "win64"){
			string $filename = `basename $sourcePath ""`;
			string $baseFileName = `basenameEx $sourcePath`;
			string $dateFolder = `date -f "MMDDYY"`;
			string $destFolder = (`workspace -q -rd`+"../../RENDER/FOR_EDIT/"+$dateFolder+"/");
			//if (`workspace -q -rd` == "M:/Skylanders2013_PP10102/3D/Skylanders2013_maya/")
				$destFolder = (`workspace -q -rd`+"../../RENDER/FOR_EDIT/"+$seq+"/"+$dateFolder+"/");

			if (!`filetest -d $destFolder`)
				evalEcho("sysFile -md \""+$destFolder+"\"");

			$destMovPathAlt = ($destFolder+"/"+$baseFileName+".mov");
			string $sysCmd2Alt = ($fileConvertPathAlt+" "+$fileConvertFlagsAlt+" \""+$sourcePath+"\" "+$fileConvertFlagsAlt2+" \""+$destMovPathAlt+"\"");

			// write a batch file to the users temp folder that will convert the movie for the editor and then delete the avi after
			$tempLoc = `getenv TEMP`;
			$dateS = `date -f YYMMDDhhmmss`;
			$tempBatchFile = ($tempLoc+"/PPCommitToEdit.bat");

			// 0:Server 1:Job 2:ShotFolder 3:Seq 4:Shot 5:dept 6:subDept 7:take 8:version 9:ext
			$copyPath = ($shotInfo[0]+"/"+$shotInfo[1]+"/RENDER/FOR_EDIT/"+$shotInfo[3]+"/"+$dateFolder+"/"+$baseFileName+".mov");//substitute("3D/Skylanders2013_maya/../../",$destMovPathAlt,"");
			$copyPath = toNativePath($copyPath);
			$copyToPath = ($shotInfo[0]+"/"+$shotInfo[1]+"/RENDER/"+$shotInfo[2]+"/"+$shotInfo[3]+"/"+$shotInfo[3]+"_"+$shotInfo[4]+"/"+toupper($shotInfo[5])+"/"+$baseFileName+"/"+$baseFileName+".mov");
			//$copyToPath = substitute("3D/Skylanders2013_maya/",$copyToPath,"");
			$copyToPath = toNativePath($copyToPath);
			$dirToMake = dirname($copyToPath);
			sysFile -makeDir $dirToMake;

			$fileId=`fopen $tempBatchFile "w"`;
				fprint $fileId ($sysCmd2Alt+"\n\r");
				fprint $fileId ("copy \""+$copyPath+"\" \""+$copyToPath+"\" /Y\n\r");
				fprint $fileId ("del \""+toNativePath($sourcePath)+"\"\n\r");
				//fprint $fileId ("del /Q \""+$pbPath+"\"\n\r");
				//fprint $fileId ("rmdir \""+$pbPath+"\"\n\r");
			fclose $fileId;

			$cmd = ("system(\"start \\\""+$tempBatchFile+"\\\"\");\n");

			string $raidQue = ("M:/TEMP/syncEditRaid/" + $shotInfo[1] + ".txt");
			int $queExists = `filetest -w $raidQue`;
			string $newLine = "\n";
			if ($queExists == 0){
				$newLine = "";
			}
			$fileId2 = `fopen $raidQue "a"`;
				fprint $fileId2 ($newLine+$copyToPath);
			fclose $fileId2;

			evalEcho ($cmd);
		}
	}
	else{
		// if answer is no, just delete the avi
		$cmd = ("system(\"del \\\""+encodeString(toNativePath($sourcePath))+"\\\"\");\n");
		//$cmd = ("system(\"del /Q \\\""+$pbPath+"\\\"\");\n");
		//$cmd += ("system(\"rmdir \\\""+$pbPath+"\\\"\");\n");
		evalEcho($cmd);
	}
}

global proc ppPlayblastCheckFrameRange(string $pbPath){


	float $currentS = `playbackOptions -q -min`;
	float $currentE = `playbackOptions -q -max`;	

	$result = "Set Offical Frame Range";

	string $tokenBuffer[];
	string $sceneName = `basenameEx $pbPath`;
	print ("$pbPath="+$pbPath+"\n");
	string $scenesPath = `match "/RENDER/_[a-zA-Z0-9_]+" $pbPath`;
	print ("$scenesPath="+$scenesPath+"\n");
	if (size($scenesPath)>0){

		tokenize $scenesPath "/" $tokenBuffer;
		string $shotFolder = $tokenBuffer[1];
		tokenize $sceneName "_" $tokenBuffer;
		string $shotName = ($tokenBuffer[0]+"/"+$tokenBuffer[0]+"_"+$tokenBuffer[1]);

		// get the detail
		float $start;
		float $end;		
		string $shotDetails[] = abxShotsGetShotDetails($shotName, $shotFolder);
		if (size($shotDetails)>3){
			$start = $shotDetails[2];
			$end = $shotDetails[3];
		}

		// check for initial frame range
		string $result;
		if ($start < 1 || $end < 1 || $end < $start){
			$result = `confirmDialog -title "Offical Frame Range Missing" -message ($shotName+" has no offical frame range specified. Would you like to set it to your current frame range? ("+$currentS+"-"+$currentE+")") -button "Set Offical Frame Range" -button "Skip" -defaultButton "Skip " -cancelButton "Skip" -dismissString "Skip"`;
			if ($result == "Set Offical Frame Range"){
				evalEcho("abxShotsSetFrameRange \""+$shotFolder+"\" \""+$shotName+"\" \""+$currentS+"\" \""+$currentE+"\"");
				$start = $currentS;
				$end = $currentE;
			}
		}
		if ($result != "Skip"){
			if ($currentS != $start || $currentE != $end) {
				$result = "Match Offical Frame Range";
				$result = `confirmDialog -title "Frame Range Mismatch" -message ("Your current frame range ("+$currentS+"-"+$currentE+") does not match the offical frame range ("+$start+"-"+$end+") for Shot:"+$shotName) -button "Match Offical Frame Range" -button "Abort Playblast" -defaultButton "Match Offical Frame Range" -cancelButton "Abort Playblast" -dismissString "Abort Playblast"`;
				if ($result == "Match Offical Frame Range"){
					playbackOptions -e -min $start;
					playbackOptions -e -max $end;	
				}
				else {
					error ("User Aborted Playblast due to frame range not matching offical frame range for the shot");
				}
			}
		}
	}
}