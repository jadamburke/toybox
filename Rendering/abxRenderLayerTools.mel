// abxRenderLayerTools




global proc abxRenderLayerTools() {
if (`window -ex abxRenderLayersWindow` != true)
	{
		window -w 150 -h 200 -t "abxRenderLayerTools" -in "abxTimeOffset" -s true -tb true abxRenderLayersWindow;

		columnLayout -rs 1 -w 400 -cal "center" -cat "both" 0 -adj true abxTimeOffsetColLyt;


		button -label "Export Current Layer" -h 20 -w 60 -c "exportRenderLayerEdits `editRenderLayerGlobals -q -currentRenderLayer` `fileDialog -title \"Save Render Layer MEL\" -mode 1 -directoryMask \"*.mel\"`";
		button -label "Export All Layers" -h 20 -w 60 -c "exportAllRenderLayers";
		button -label "Import Render Layer" -h 20 -w 60 -c "importRenderLayer `fileDialog`";
		button -en 0 -label "Import Layer to Master" -h 20 -w 60 -c "";
		button -label "Rebuild Current Layer" -h 20 -w 60 -c "rebuildRenderLayer";
		button -en 0 -label "Breakout Current Layer" -h 20 -w 60 -c "";
		button -en 0 -label "Breakout All Layers" -h 20 -w 60 -c "";
		button -en 0 -label "Commit Layer to default" -h 20 -w 60 -c "";
		button -en 0 -label "Diagnose Locked Layers" -h 20 -w 60 -c "";
		button -label "List Layer Edits" -h 20 -w 60 -c "showRenderLayerEdits \"all\"  `editRenderLayerGlobals -q -currentRenderLayer`";

		window -e -w 150 -h 200 abxRenderLayersWindow;
		showWindow abxRenderLayersWindow;
	}
	else	// else just pop it up from being minimized again
    	{
		window -e -w 150 -h 200 abxRenderLayersWindow;
		showWindow abxRenderLayersWindow;
    	}


}


// parses the edits in the current layer into the equivelent mel commands and saves to a file

global proc exportRenderLayerEdits(string $renderLayerName, string $filePath) {


	string $editCommands[];
	string $shadingGroups[];
	int $index = 0;

	//file -op "v=0" -typ "mayaAscii" -pr -es "C:/Documents and Settings/aburke/Desktop/shaders.ma";


	// get name of render layer
	//string $renderLayerName = `editRenderLayerGlobals -q -currentRenderLayer`;



	// set the renderLayer to the render layer to export
	editRenderLayerGlobals -currentRenderLayer $renderLayerName;


	// open file prompt to choose where to save file
  	// $filePath = `fileDialog -title "Save Render Layer MEL" -mode 1 -directoryMask "*.mel"`;
	print ($filePath+"\n");



	// add abxRenderLayerHeader for file identification:
	$editCommands[size($editCommands)] = "// abxRenderLayer Export File";
	$editCommands[size($editCommands)] = "// Generated by abxRenderLayerTools.mel Version 1.0";
	$editCommands[size($editCommands)] = ("// Exported from File: "+`file -q -sn`+"\n");

	$editCommands[size($editCommands)] = ("createRenderLayer -empty -name "+$renderLayerName+"\;");
	$index++;
	
	// get members of render layer
	string $renderLayerMembers[] = `editRenderLayerMembers -q -fullNames $renderLayerName`;
	for ($each in $renderLayerMembers){
		$editCommands[size($editCommands)] = ("editRenderLayerMembers "+$renderLayerName+" "+$each+"\;");
		$index++;
	}



	// create command to make the new layer current
	string $overrideAttrs[] = `editRenderLayerAdjustment -q`;
	$editCommands[size($editCommands)] = ("editRenderLayerGlobals -currentRenderLayer "+$renderLayerName+"\;");
		
	// get overrides of render layer
	for ($each in $overrideAttrs){
		//print ("override="+$each+"\n");

		// create override on render layer
		
		$index++;

		// check for connections
		string $destination[] = `listConnections -destination 1 -plugs 1 $each`;
		string $destinationNode[] = `listConnections -destination 1 -plugs 0 $each`;
		int $i=0;
		if (size($destination)>1 && !(`gmatch $destination[0] "*.plug"`)){
			for ($every in $destination){

				//print ("destination="+$every+"\n");
				// if connection found isn't to the render layer itself

				if (!`gmatch $every "*.plug"` && !(`gmatch $every "*.outPlug"`)){
					// if its not a shader assignment
					if (!`gmatch $each "*.instObjGroups*"`){
						$editCommands[size($editCommands)] = ("editRenderLayerAdjustment -layer "+$renderLayerName+" "+$each+"\;");
						$editCommands[size($editCommands)] = ("connectAttr -f "+$every+" "+$each+"\;");
						$index++;
					}
					// if it is a shader assignment
					else{
						string $tokenBuffer[];
						tokenize $every "." $tokenBuffer;
						string $shaderSG = $tokenBuffer[0];
						tokenize $each "." $tokenBuffer;
						string $shapeNode = $tokenBuffer[0];
						$editCommands[size($editCommands)] = ("sets -forceElement "+$shaderSG+" "+$shapeNode+"\;");
					}
				}
				
			}
			//store connection command for later execution
		}
		else {
			
			print ("destination="+$destination[0]+"\n");
			string $attrType = `getAttr -type $each`;
			// if its an array and not a single string attr
			print ($each+" Type ="+$attrType+"\n");
			if (!`gmatch $destination[0] "*.plug"` && !(`gmatch $destination[0] "*.outPlug"`)){
				if ($attrType == "float3" || $attrType == "double3" ){
					$attrValue = `getAttr $each`;
					string $commandBuilder = ("setAttr "+$each);
					for ($every in $attrValue){
						$commandBuilder  = ($commandBuilder +" "+$every);
					}
					$editCommands[size($editCommands)] = ($commandBuilder+"\;");
				}
				else{
					$attrValue = `getAttr $each`;
					$editCommands[size($editCommands)] = ("editRenderLayerAdjustment -layer "+$renderLayerName+" "+$each+"\;");
					$editCommands[size($editCommands)] = ("setAttr "+$each+" "+$attrValue+"\;");
				}
				$index++;
			}
			//store setAttr command for later execution
		}
		$i++;

	}

	// open file for writing
	//int $fileId = fopen($filePath,"w");
	int $fileId = fopen(fromNativePath($filePath),"w");

	//write commands to file
	for ($each in $editCommands){
		fprint $fileId ($each+"\n");
	}
	fclose $fileId;
}

global proc importRenderLayer (string $filename) {


	// open dialog to point to file
	//string $filename = `fileDialog`;
	print ($filename + "\n");


	// open file
	$fileId=`fopen $filename "r"`;

	// check to see if it is an abxRenderLayer file

	// check to see if the renderLayer already exists
	// if it exists prompt the user
		// would you like to replace, merge, or rename

	// run each line with error suppression

	string $nextLine = `fgetline $fileId`;
	while ( size( $nextLine ) > 0 ) {
		if ( catch( eval($nextLine))){
			print ("Render Layer Override Command Failed: ");
		}
    		print ( $nextLine );
    		$nextLine = `fgetline $fileId`;
	}
	fclose $fileId;


}

global proc exportAllRenderLayers () {
	
	// get a list of all render layers
	string $allRenderLayers[] = `ls -type "renderLayer"`;
	// pick a save location prefix
	$filePathPrefix = `fileDialog -title "Save Render Layer MEL" -mode 1 -directoryMask "*.mel"`;
	// export each render layer
	for ($each in $allRenderLayers){
		if (!`gmatch $each "*defaultRenderLayer"`){
			exportRenderLayerEdits $each ($filePathPrefix+"_"+$each+".mel");
		}
	}
}

global proc rebuildRenderLayer(){

	// export to temp file
	string $tempPath = `getenv TEMP`;
	string $currentLayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	exportRenderLayerEdits($currentLayer,($tempPath+"/tempRenderLayer.mel"));

	// delete layer
	delete $currentLayer;
	
	// import temp layer
	importRenderLayer ($tempPath+"/tempRenderLayer.mel");
	

}

// creates and populates a UI with render Layer information. Options to remove edits like with referencing
global proc showRenderLayerEdits (string $mode, string $layerName) {


	// create window UI

	string $window = ("renderLyrEditsWin_" + $layerName);

	if (`window -exists $window`) {
		deleteUI -window $window;
	}

	window -title ($layerName+ " Edits List") $window;

	string $mainForm = `formLayout -numberOfDivisions 100 ($window + "_formLayout")`;

	

	string $textScrollList = `iconTextScrollList ($window + "_textScrollList")`;
    	iconTextScrollList -edit -height 500 -width 250 -allowMultiSelection true $textScrollList;
	

	string $layerEdits[] = `getLayerEditsList "all" $layerName`;
	for ($each in $layerEdits){
		iconTextScrollList -edit -append $each $textScrollList;
	}

	string $buttonForm = `formLayout -numberOfDivisions 100`;

		string $refreshButton = `button -label "Refresh Layer Edit List" ($window + "_refreshButton")`;

		string $removeButton = `button -label "Remove Selected Edits" ($window + "_removeButton")`;

		button -edit -command ("refreshLayerEditsWindow "+$layerName) $refreshButton;

		button -edit -command ("removeSelectedLayerEdits "+$layerName+";"+"refreshLayerEditsWindow "+$layerName) $removeButton;

		formLayout -edit
			-attachForm		$refreshButton     "top"		0
			-attachForm		$refreshButton     "left"		0
			-attachForm		$refreshButton     "bottom"		0
			-attachPosition $refreshButton     "right"		0 50

			-attachForm		$removeButton		"top"		0
			-attachPosition $removeButton		"left"		0 50
			-attachForm     $removeButton		"bottom"	0
			-attachForm     $removeButton		"right"		0

			$buttonForm;

		setParent $mainForm;

	formLayout -edit


		-attachForm $textScrollList     "top"	5	
		-attachForm $textScrollList     "left" 5
		-attachForm $textScrollList     "bottom" 35
		-attachForm $textScrollList     "right" 5 

		-attachControl	$buttonForm		    "top"		5	$textScrollList
		-attachForm     $buttonForm			"left"		5
		-attachForm     $buttonForm			"bottom"	5
		-attachForm     $buttonForm			"right"		5

		$mainForm;



	showWindow $window;
	


}


global proc string[] getLayerEditsList (string $mode, string $layerName){

	string $result[];

	if ($mode == "members" || $mode == "all"){
		string $memberList[] = `editRenderLayerMembers -q $layerName`;
		if (size($memberList) > 0){
			$result[size($result)] = "----------------------------";
			$result[size($result)] = "--------Members-------";
			$result[size($result)] = "----------------------------";
		}
		for ($each in  $memberList){
			$result[size($result)] = $each;
		}
	}

	if ($mode == "attrs" || $mode == "all"){
		string $adjList[] = `editRenderLayerAdjustment -q -layer $layerName`;
		int $showTitle = 0;

		for ($each in $adjList){
			if (!`gmatch $each "*.instObjGroups*"`){
				$showTitle = 1;
			}
		}

		if ($showTitle==1){
			$result[size($result)] = "----------------------------";
			$result[size($result)] = "----Attr Overrides----";
			$result[size($result)] = "----------------------------";
		}

		for ($each in $adjList){
			if (!`gmatch $each "*.instObjGroups*"`){
				$result[size($result)] = $each;
				$showTitle = 1;
			}
		}

	}

	
	if ($mode == "shaders" || $mode == "all"){
		string $adjList[] = `editRenderLayerAdjustment -q -layer $layerName`;
		int $showTitle = 0;

		for ($each in $adjList){
			if (`gmatch $each "*.instObjGroups*"`){
				$showTitle = 1;
			}
		}
		if ($showTitle==1){
			$result[size($result)] = "----------------------------";
			$result[size($result)] = "---Shader Overrides---";
			$result[size($result)] = "----------------------------";
		}

		for ($each in $adjList){
			if (`gmatch $each "*.instObjGroups*"`){
				$result[size($result)] = $each;
				$showTitle = 1;
			}
		}

	}

	
	return $result;
}

global proc removeSelectedLayerEdits (string $layerName) {
	
	$window = ("renderLyrEditsWin_" + $layerName);

	// if it contains a "." then its an attr override otherwise its an member edit

	if (`window -exists $window`) {
		// find selected edits and remove them from layer

		string $textScrollList = ($window + "_textScrollList");
		string $selectedList[] = `iconTextScrollList -q -selectItem $textScrollList`;
		for ($each in $selectedList){
			// if it is not a comment label line
			if (!`gmatch $each "----*"`){
				// if it contains a period it must be an attribute override
				if (`gmatch $each "*.*"`){
					editRenderLayerAdjustment -layer $layerName -remove $each;
				
				}
				else {
					editRenderLayerMembers -remove $layerName $each;
				}
			}
		}
	}

	

}

global proc refreshLayerEditsWindow (string $layerName) {

	$window = ("renderLyrEditsWin_" + $layerName);
	string $textScrollList = ($window + "_textScrollList");
	
	// clear text scroll list
	iconTextScrollList -edit -ra $textScrollList;

	if (`window -exists $window`) {

		string $layerEdits[] = `getLayerEditsList "all" $layerName`;
		for ($each in $layerEdits){
			iconTextScrollList -edit -append $each $textScrollList;
		}


	}



}

global proc diagnoseRenderLayers () {
	// parses render layer edits looking for missing nodes and reports their name
	

}

global proc clearAdjustments(string $renderLayerName) {


}

global proc clearShaderAdjustments (string $renderLayerName) {

}

