// LEGOMirror.mel
// Created by: jason
// Date: 2013/07/02 12:07:38


global proc LEGOMirror()
{
       string $mySel[]=`ls -sl`;
    string $myNameSpace="";
    string $mySide="";
    string $theSide="";
    string $myOpositSide="";
    int $mySelSize=`size($mySel)`;
    if ($mySelSize)
    {
        for ($obj in $mySel)
        {
            //check for namespace
            //check for side
            string $myBuffer[];
            $myTokens = `tokenize $obj ":" $myBuffer`;
            print ($myBuffer[0]+"\n");
            print ($mySel[0]+"\n");
            if ($myBuffer[0] != $mySel[0])
            {
                int $myBufferSize = size($myBuffer);
               
                if ($myBufferSize == 2)
                {
                    $myNameSpace=($myBuffer[0]+":");
                    //side
                    string $mySideBuffer[];
                    $mySideTokens = `tokenize $myBuffer[1] "_" $mySideBuffer`;
                    $mySide=$mySideBuffer[0];
                    
                }
                if ($myBufferSize == 3)
                {
                    $myNameSpace=($myBuffer[0]+":"+$myBuffer[1]+":");
                    //side
                    string $mySideBuffer[];
                    $mySideTokens = `tokenize $myBuffer[2] "_" $mySideBuffer`;
                    $mySide=$mySideBuffer[0];
                }
                if ($myBufferSize == 4)
                {
                    $myNameSpace=($myBuffer[0]+":"+$myBuffer[1]+":"+$myBuffer[2]+":");
                    //side
                    string $mySideBuffer[];
                    $mySideTokens = `tokenize $myBuffer[3] "_" $mySideBuffer`;
                    $mySide=$mySideBuffer[0];
                 }
            }
            if ($myBuffer[0] == $mySel[0])
            {
                 //side
                 string $mySideBuffer[];
		 string $ghettoLeft = substitute("LFT",$myBuffer[0],"_left");
   		 string $ghettoRight = substitute("RGT",$ghettoLeft,"_right");
                 $mySideTokens = `tokenize $ghettoRight "_" $mySideBuffer`;
                 $mySide=$mySideBuffer[1];
            }
            if($mySide=="left"){
                $myOpositSide="RGT";
		$theSide = "LFT";}
		
            if($mySide=="right"){
                $myOpositSide="LFT";
		$theSide="RGT";}
                
            int $whatType = `getAttr ($obj+".SONtype")`;
            print ($whatType+"\n");
	    //print ("its the left side, so the opposite side ="+$myOpositSide+" and the side ="+$theSide+" \n");
            string $oppositeObj = substitute ($theSide,$obj,$myOpositSide);
	    //print ($obj+"\n");
	    //print ($oppositeObj+"\n");
            string $sameAtts[];
            string $flipAtts[];
            if($whatType ==2)
            {
                string $atts[] = {".tx", ".ty", ".tz", ".rx", ".ry", ".rz"};
                for($tmp in $atts)
                {
                    float $myAtt=`getAttr ($obj+$tmp)`;
                    setAttr ($oppositeObj+$tmp) $myAtt;
                }
            }
            else
            {
                if ($whatType == 1)
                {
                    
                    $sameAtts = { ".rx", ".ry", ".rz"};
                    $flipAtts = {".tx", ".ty", ".tz"};
                }
                
                if ($whatType == 0)
                {
                    $sameAtts = { ".ty", ".tz", ".rx"};
                    $flipAtts = {".tx", ".ry", ".rz"};
                }
                
                for($tmp in $sameAtts)
                {
                      if (`getAttr -k ($obj+$tmp)`)
                        {
                        float $myAtt=`getAttr ($obj+$tmp)`;
                        setAttr ($oppositeObj+$tmp) $myAtt;
                        }
                }
                
                for($tmp in $flipAtts)
                {
                      if (`getAttr -k ($obj+$tmp)`)
                        {
                        float $myAtt=`getAttr ($obj+$tmp)`;
                        setAttr ($oppositeObj+$tmp) ($myAtt*-1);
                }
            }
            }
   }   }   } 
   
   

//give the controllers the attribute to identify if they are world or behavior


global proc setMirrored()
{
    string $mySel[] = `ls -sl`;
    for($tmp in $mySel)
    {
        addAttr -ln "SONtype"  -at double  -min 0 -max 2 -dv 0 $tmp;
        setAttr ($tmp+".SONtype") 2;
    }

}
    

global proc setWorld()
{
    string $mySel[] = `ls -sl`;
    for($tmp in $mySel)
    {
        addAttr -ln "SONtype"  -at double  -min 0 -max 2 -dv 0 $tmp;
        setAttr ($tmp+".SONtype") 0;
    }
}

global proc setFlip()
{
    string $mySel[] = `ls -sl`;
    for($tmp in $mySel)
    {
        addAttr -ln "SONtype"  -at double  -min 0 -max 2 -dv 0 $tmp;
        setAttr ($tmp+".SONtype") 1;
    }

}
      