// stephenkmann@yahoo.com
global proc smStartChar ()
{
// allkeyable check
if (`objExists ALLKEYABLE`)
        error "dude, an ALLKEYABLE already exists, stopping create";

createTopNodeGroups;
smCreateSets;

smCreateVis; smCreateRigVis; parent rigVis vis;

parent vis GOD;

addAttr -dt "string" -ln "smcreationDate" GOD;
string $date = `about -date`;
string $buff[];
tokenize $date " " $buff;
string $usr = `getenv USER`;
string $note = ($buff[1] + " " + $usr);
setAttr -type "string" "GOD.smcreationDate" $note;

sets -add  ALLKEYABLE GOD;
sets -add  ALLKEYABLE DIRECTION;
sets -add  ALLKEYABLE BODY;

string $gCrv = `curve -d 1 -p 0 0 -6.88573 -p -2.81689 0 -5.633779 -p -0.625975 0 -5.633779 -p -0.625975 0 -5.007804 -p -5.007804 0 -5.007804 -p -5.007804 0 -0.625975 -p -5.633779 0 -0.625975 -p -5.633779 0 -2.81689 -p -6.88573 0 0 -p -5.633779 0 2.81689 -p -5.633779 0 0.625975 -p -5.007804 0 0.625975 -p -5.007804 0 5.007804 -p -0.625975 0 5.007804 -p -0.625975 0 5.633779 -p -2.81689 0 5.633779 -p 0 0 6.88573 -p 2.81689 0 5.633779 -p 0.625975 0 5.633779 -p 0.625975 0 5.007804 -p 5.007804 0 5.007804 -p 5.007804 0 0.625975 -p 5.633779 0 0.625975 -p 5.633779 0 2.81689 -p 6.88573 0 0 -p 5.633779 0 -2.81689 -p 5.633779 0 -0.625975 -p 5.007804 0 -0.625975 -p 5.007804 0 -5.007804 -p 0.625975 0 -5.007804 -p 0.625975 0 -5.633779 -p 2.81689 0 -5.633779 -p 0 0 -6.88573 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 `;
string $gCrvRel[] = `listRelatives -c -s $gCrv`;
parent -r -shape $gCrvRel[0] GOD;
connectAttr "vis.main" ($gCrvRel[0]+ ".v");
delete $gCrv;

string $dCrv = `curve -d 1 -p -4 0 -4 -p 4 0 -4 -p 4 0 4 -p -4 0 4 -p -4 0 -4 -k 0 -k 1 -k 2 -k 3 -k 4 `;
string $dCrvRel[] = `listRelatives -c -s $dCrv`;
parent -r -shape $dCrvRel[0] DIRECTION;
connectAttr "vis.main" ($dCrvRel[0]+ ".v");
color -ud 8 $dCrvRel[0];
		rename $dCrvRel[0] "DIRECTIONShape";

delete $dCrv;
string $bCrv = `smCreateBasicMover`;
string $bCrvRel[] = `listRelatives -c -s $bCrv`;
for ($crv in $bCrvRel)
	{
        parent -r -shape $crv BODY;
	connectAttr "vis.main" ($crv + ".v");
        rename $crv "BODYShape";
	}
delete $bCrv;



setAttr -l 1 -k 0 DIRECTION.sx;
setAttr -l 1 -k 0 DIRECTION.sy;
setAttr -l 1 -k 0 DIRECTION.sz;
setAttr -l 1 -k 0 DIRECTION.v;

setAttr -l 1 -k 0 BODY.sx;
setAttr -l 1 -k 0 BODY.sy;
setAttr -l 1 -k 0 BODY.sz;
setAttr -l 1 -k 0 BODY.v;

// create a deleteRig set
select -cl;
createDeleteSet deleteRig;
}


global proc smCreateVis ()
	{
	curve -name vis -d 1 -p 0.00156207 -0.943749 0 -p -0.878125 1.4 0 -p -1.3 1.4 0 -p -0.19375 -1.4 0 -p 0.193751 -1.4 0 -p 1.3 1.4 0 -p 0.878126 1.4 0 -p 0.00156207 -0.943749 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;
	rename `listRelatives -s -c -f "vis"` "visShape";
// add the attrs for showing and hiding movers

string $sels[] = `ls -sl`;
string $each;
for ($each in $sels)
           {
                addAttr -at bool -k 1 -ln "main" -dv 1 $each;
                	setAttr -cb 1 ($each + ".main");
                addAttr -at bool -k 1 -ln eye $each;
                	setAttr -cb 1 ($each + ".eye");
                addAttr -at bool -k 1 -ln ears $each;
                	setAttr -cb 1 ($each + ".ears");
	        addAttr -at bool -k 1 -ln head $each;
	        	setAttr -cb 1 ($each + ".head");
	        addAttr -at bool -k 1 -ln body $each;
	        	setAttr -cb 1 ($each + ".body");
	        addAttr -at bool -k 1 -ln armIk $each;
	        	setAttr -cb 1 ($each + ".armIk");
	        addAttr -at bool -k 1 -ln armFk $each;
	        	setAttr -cb 1 ($each + ".armFk");
	        addAttr -at bool -k 1 -ln legIk $each;
	        	setAttr -cb 1 ($each + ".legIk");
	        addAttr -at bool -k 1 -ln legFk $each;
	        	setAttr -cb 1 ($each + ".legFk");
                addAttr -at double -k 1 -min 0 -max 3 -dv 0 -ln "divisions" $each;
                	setAttr -cb 1 ($each + ".divisions");

            }
     }

//
// create  sets  to be used for rigging, and rig switching
// by stephenkmann@yahoo.com
//
//  ALLKEYABLE is created and should contain all Cntrols or animatable objects
//
//  RES:HIRES
//      MEDRES
//      LORES
//              are created to hold geometry of those resolutions
//              can then be hidden and shown using smResSwitch

global proc smCreateSets()
{
// check if the sets already exist
if (`objExists ALLKEYABLE`)
        error "the ALLKEYABLE set already exists";

sets -name HIRES -empty;
sets -name MEDRES -empty;
sets -name LORES -empty;
sets -name DXRES -empty;
sets -name RES -empty;
sets -name deleteForHiRes -empty;
sets -name SMOOTH_GEO -empty;

	sets -in RES HIRES;
	sets -in RES MEDRES;
	sets -in RES LORES;
	sets -in RES DXRES;
	sets -in RES deleteForHiRes;

sets -name ALLKEYABLE -empty;
sets -name Body -empty;
sets -name Head -empty;
sets -name Misc -empty;
     sets -in ALLKEYABLE Body;
     sets -in ALLKEYABLE Head;
     sets -in ALLKEYABLE Misc;


sets -name RIGSet -empty;
sets -name bndJnts -empty;
        sets -in RIGSet bndJnts;
        sets -in RIGSet SMOOTH_GEO;

sets -name MAIN -empty;
	sets -in MAIN ALLKEYABLE;
 	sets -in MAIN RIGSet;
	sets -in MAIN RES;
	
// lock the sets from deletion
//

lockNode -l 1 MAIN;

lockNode -l 1 RES;
lockNode -l 1 HIRES;
lockNode -l 1 MEDRES;
lockNode -l 1 LORES;
lockNode -l 1 DXRES;
lockNode -l 1 deleteForHiRes;

lockNode -l 1 ALLKEYABLE;
lockNode -l 1 Body;
lockNode -l 1 Head;
lockNode -l 1 Misc;

lockNode -l 1 RIGSet;

}

//
//

  // create a rig vis mover
 global proc smCreateRigVis ()
 {
  curve -name rigVis -d 1 -p 1.142887 1.002557 0 -p 1.301206 1.400654 0 -p 2.020337 1.400654 0 -p 2.219385 1.79875 0 -p 2.717006 1.79875 0 -p 3.115102 1.400654 0 -p 3.115102 1.400654 0 -p 2.517958 1.400654 0 -p 2.517958 1.002557 0 -p 3.115102 1.002557 0 -p 2.717006 0.604461 0 -p 2.219385 0.604461 0 -p 2.020337 1.002557 0 -p 1.142887 1.002557 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 ;
  rename `listRelatives -s -c -f "rigVis"` "rigVisShape";
// add the attrs for showing and hiding movers

string $sels[] = `ls -sl`;
string $each;
for ($each in $sels)
 {
	addAttr -at bool -ln clusters $each;
	setAttr -e -keyable true -cb 1 ($each + ".clusters");

	addAttr -at bool -ln tgts $each;
	setAttr -e -keyable true -cb 1 ($each + ".tgts");

	addAttr -at bool -ln curves $each;
	setAttr -e -keyable true -cb 1 ($each + ".curves");

	addAttr -at bool -ln ffd $each;
	setAttr -e -keyable true -cb 1 ($each + ".ffd");

	addAttr -at bool -ln excess $each;
	setAttr -e -keyable true -cb 1 ($each + ".excess");

		addAttr -at bool -ln sculpts $each;
	setAttr -e -keyable true -cb 1 ($each + ".sculpts");

		addAttr -at bool -ln locators $each;
	setAttr -e -keyable true -cb 1 ($each + ".locators");

		addAttr -at bool -ln ikHandles $each;
	setAttr -e -keyable true -cb 1 ($each + ".ikHandles") ;
	
		addAttr -at bool -ln nonLinears $each;
	setAttr -e -keyable true -cb 1 ($each + ".nonLinears") ;
	
		addAttr -at bool -ln hairCrvs $each;
	setAttr -e -keyable true -cb 1 ($each + ".hairCrvs") ;

		addAttr -at bool -ln follicles $each;
	setAttr -e -keyable true -cb 1 ($each + ".follicles") ;
	
		addAttr -at bool -ln distance $each;
	setAttr -e -keyable true -cb 1 ($each + ".distance") ;
	
		addAttr -at bool -ln wires $each;
	setAttr -e -keyable true -cb 1 ($each + ".wires") ;

		addAttr -at bool -ln baseWires $each;
	setAttr -e -keyable true -cb 1 ($each + ".baseWires") ;
	
	setAttr -e -k 0 ($each + ".tx");
	setAttr -e -k 0 ($each + ".ty");
	setAttr -e -k 0 ($each + ".tz");

        setAttr -e -k 0 ($each + ".rx");
	setAttr -e -k 0 ($each + ".ry");
	setAttr -e -k 0 ($each + ".rz");

        setAttr -e -k 0 ($each + ".sx");
	setAttr -e -k 0 ($each + ".sy");
	setAttr -e -k 0 ($each + ".sz");
	
	setAttr -e -k 0 ($each + ".v");
	


 }
}

//
// smCreateBasicRigFile
// stephenkmann@yahoo.com
// this is added to the create character dirs.mel
// creates real files, instead of dummy files.
// the rig file automatically references the "empty" geo file.
//
// $currentProject - return of workspace -q -act
// $cName = "name of character"
// $type = props / char
// $dataType = ma/mb
global proc smCreateBasicRigFile (string $currentProject ,string $cName , string $type, string $dataType)
{
string $dataTypeLong;
if ($dataType == "")
	$dataType = "ma";
	$dataTypeLong = "mayaAscii";
if ($dataType == "mb")
	$dataTypeLong = "mayaBinary";
//source propifyUI;
string $item;
        $item =($currentProject + "/scenes/master/" + $type + "/" + $cName + "/geo/" + $cName + "." + $dataType);
// create an empty geo file
if (`filetest -s $item` == false)
	{
	print ("creating geo masterFile " + $dataType+" . . . \n");
	NewScene;
	file -rename $item;
	string $outGeoFile = `file -save -type $dataTypeLong -de 1`;
	print ("geo file "+$outGeoFile +" created\n");
	}

// create the rig file(s)
print "creating rig file . . . \n";
NewScene;
file -reference -type $dataTypeLong -rpr geo $item;
// create top groups and sets for the rig file
smStartChar;
// get the top groups of the reffed geo if there is any . . .
string $theTopGrps[];	
string $rFile[] = `file -q -r`;
for ($rfile in $rFile)
	 {
	 string $file = `match "[^/ ]*$" $rfile`;
	 string $refObjs[] = `reference -f $file -q -node`;
	 for ($obj in $refObjs)
		{
			if (`nodeType $obj` == "mesh" || `nodeType $obj` == "nurbsSurface")
			      {
			      print ("adding " + $obj + " to the HIRES Set\n");
				sets -add "HIRES" $obj;
				}
		string $parent[] = `listRelatives -ap $obj`;
		if (`size $parent` <= 0 && `nodeType $obj` == "transform")
		  $theTopGrps[`size$theTopGrps`] = $obj;
		}
	print $theTopGrps;
	catchQuiet(`parent $theTopGrps BODY`);
	 }
// the reffed geo should now all be grouped under the BODY node 
// and the geo added to the HIRES set.
print "ready to save (smCreateBasicRigFile)\n";
// save a workshop
print ("currentProject:" + $currentProject + "\n");
print ("cName:"  + $cName + "\n");
print ("type:" + $type + "\n");
print ("dataType:" + $dataType + "\n");
smFiler "workshop" ($cName + "." + $dataType) "rig" $type $dataType $currentProject 0 "";
smFiler "master" ($cName + "." + $dataType) "rig" $type $dataType $currentProject 0 "";
print "smCreateBasicRigFile done\n";
NewScene;
}
 //-----------------------------------------------------------------------------------------------------------------------------------
/*  example of how to run the script

{
waitCursor -state on;
// actually do something
string $currentProject = `workspace -q -act`;
string $cName = "testMonkey";
string $type = "char";
system ("mayabatch -batch -log \"c:/TEMP/charBuildLog.txt\" -proj  \"" + $currentProject  + "\"; -c \"source \\\"propifyUI.mel\\\"; smCreateBasicRigFile \\\"" + $currentProject + "\\\" \\\"" + $cName + "\\\" \\\"" + $type + "\\\";\" ");
print "done";
waitCursor -state off;
}


 // create a basic mover
  global proc string smCreateBasicMover ()
   {

   circle -n TEMPCIRCLE -c 0 0 0 -nr 0 1 0 -sw 360 -r 4 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;

        curve -n tmpCRV -d 1 -p -4 0.540376 0 -p -4 -0.540376 0 -k 0 -k 1 ;
              pickWalk -d down;
              select -add TEMPCIRCLE ;
              parent -r -shape;
              select -cl;
              delete tmpCRV;
        curve -n tmpCRV -d 1 -p 0 0.540376 4 -p 0 -0.540376 4 -k 0 -k 1 ;
              pickWalk -d down;
              select -add TEMPCIRCLE ;
              parent -r -shape;
              select -cl;
              delete tmpCRV;
        curve -n tmpCRV -d 1 -p 4 0.540376 0 -p 4 -0.540376 0 -k 0 -k 1 ;
              pickWalk -d down;
              select -add TEMPCIRCLE ;
              parent -r -shape;
              select -cl;
              delete tmpCRV;
        curve -n tmpCRV -d 1 -p 0 0.540376 -4 -p 0 -0.540376 -4 -k 0 -k 1 ;
              pickWalk -d down;
              select -add TEMPCIRCLE ;
              parent -r -shape;
              select -cl;
              delete tmpCRV;
        curve -n tmpCRV -d 1 -p 0 0.451539 0 -p 0 -0.451539 0 -k 0 -k 1 ;
              pickWalk -d down;
              select -add TEMPCIRCLE ;
              parent -r -shape;
              select -cl;
              delete tmpCRV;
        curve -n tmpCRV -d 1 -p 0.451539 0 0 -p -0.451539 0 0 -k 0 -k 1 ;
              pickWalk -d down;
              select -add TEMPCIRCLE ;
              parent -r -shape;
              select -cl;
              delete tmpCRV;
        curve -n tmpCRV  -d 1 -p 0 0 0.451539 -p 0 0 -0.451539 -k 0 -k 1 ;
              pickWalk -d down;
              select -add TEMPCIRCLE ;
              parent -r -shape;
              delete tmpCRV;
              select -cl;
        string $newName = `rename TEMPCIRCLE basicMover`;
        
        return $newName;
   }

// this will create a set and a scriptNode
// to delete everything in the set. and then some....
// test for break out scripts
// stephenkmann@yahoo.com | smann@yahoo.com
global proc createDeleteSet(string $name)
{

if(`objExists ($name + "Sx")` && `objExists ($name + "Set")`)
	print "deleteSet already exists\n";
else
	{
        string $exp = "";

          $exp += ("string $objs[] = `sets -q " + $name + "Set`;catch(`select -r -ne $objs`);\n");
          $exp += ("catch(`delete`);\n");
          $exp += ("catch(`select -ne " + $name + "Set`);\n");
          $exp += ("catch(`delete`);\n");
          
          
         if ($name == "deleteRig")
                {
                $exp += "string $tgts[] = `sets -q MEDRES`;\n";
                $exp += "for ($tgt in $tgts) \n";
                $exp += "	{   \n";
                $exp += "	string $base =`match \"[^_]*$\" $tgt`;  \n";
                $exp += "        if (`objExists (\"geo_\" + $base)`)     \n";
                $exp += "	       {                              \n";
                $exp += "	       string $bss[] = `blendShape -n (\"geo_\" + $base + \"_blendShape\") $tgt (\"geo_\" + $base)`; \n";
                $exp += "	       setAttr ($bss[0] + \".w[0]\") 1 ; \n";
                $exp += "	       }  \n";
                $exp += "	} \n";
                }
          $exp += ("catch(`delete " + $name + "Sx`);\n");
          $exp += "print \" delete set execution: DONE\";\n";



	if (`objExists ($name + "Set")` == false)
		sets -em -n ($name + "Set");
	if (`objExists ($name + "Sx")` == false)
	scriptNode  -beforeScript  $exp -n ($name + "Sx");
	}
}
// this will find all the scripts with a 2 char suffix
// that have matching sets
// ie:   deleteForMeSx deleteForMeSet
global proc string[] findScripts ()
{
string $node[];
string $scripts[] = `ls -type "script"`;

for ($s in $scripts)
{
if (`gmatch $s "*Sx*"` == 1)
        {
        // strip off the Sx;
        string $set = "";
        int $i = 1;
        for ($i=1;$i<= (`size $s` - 2);$i++)
                {
                $set += `substring $s $i $i`;
                }
        if (`objExists ($set + "Set")`)
                $node[`size$node`] = $s;
        }
}
return $node;
}
///
//
global proc deleteForWin ()
{
if (`window -exists deleteForWin`)
        deleteUI deleteForWin;
string $w = `window -rtf 1 -t deleteMeSets deleteForWin`;
columnLayout;
string $sets[] = `findScripts`;
for ($s in $sets)
        {
        rowLayout
        -numberOfColumns 2 -cw2 150 100
        -columnAlign 1 "right"
        -columnAttach 1 "both" 0
        -columnAttach 2 "both" 10;
        checkBox -v 0 -l $s ($s + "Box");
        button -l "runScript" -c ("scriptNode -executeBefore " + $s );
         setParent ..;
        }
showWindow $w;

}

//     create the top Node groups
//
global proc createTopNodeGroups ()
{
// check if the sets already exist
if (`objExists GOD`)
        error "GOD already exists, and there cannont be more than one";

group -em -n BODY;
group -n DIRECTION BODY;
group -n GOD DIRECTION;
group -em -n RIG;
group -em -n GEO;
parent RIG GOD;
parent GEO GOD;
//
setAttr "RIG.inheritsTransform" 0;
setAttr "GEO.inheritsTransform" 0;
}

