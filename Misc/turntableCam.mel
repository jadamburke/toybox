
global proc turntableCam () {
	
	// USER VARIABLES POSSIBLY TO BE IMPLEMENTED AS PROC ARGUMENTS
	float $lens = 35.0; // camera lens focal length
	float $theOverscan = 1.0; // multiplier
	int $duration = 32; // length of animation starting at frame 1

	// select all renderable Geo
	select -add `ls -type mesh -type nurbsSurface -type subdiv`;
	
	// Variable Declarations
	float $bbox[] = `exactWorldBoundingBox`;
	float $camPos1[];
	float $camDist = 0;
	float $bboxDimensions[] = {($bbox[3]-$bbox[0]),($bbox[4]-$bbox[1]),($bbox[5]-$bbox[2])};
	float $bboxCenter[] = {($bbox[3]-$bbox[0])/2+$bbox[0],($bbox[4]-$bbox[1])/2+$bbox[1],($bbox[5]-$bbox[2])/2+$bbox[2]};

	// Determines the FOVangle/2 (The math doesn't quite work here except at 35mm)
	float $lensToAngle = `atan (0.666/($lens*.037))`;

	float $theDeg = $lensToAngle*2;
	
	// determines widest axis and determines cam distance
	if ($bboxDimensions[0]>$bboxDimensions[1] && $bboxDimensions[0]>$bboxDimensions[2]){
		$camDist = ($bboxDimensions[0])/tan($theDeg) +$bboxDimensions[0];
	}
	else if ($bboxDimensions[1]>$bboxDimensions[0] && $bboxDimensions[1]>$bboxDimensions[2]){
		$camDist = ($bboxDimensions[1]*1.333)/tan($theDeg)+$bboxDimensions[1];
	}
	else if ($bboxDimensions[2]>$bboxDimensions[0] && $bboxDimensions[2]>$bboxDimensions[1]){
		$camDist = ($bboxDimensions[2])/tan($theDeg)+$bboxDimensions[2];
	}
	
	// stores a temp array for moving the camera
	$camPos1[0]=0;
	$camPos1[1]=0;
	$camPos1[2]=$camDist*$theOverscan; 
	
	// creates the camera and renames it 
	string $turnTable[] = `camera -centerOfInterest 5 -focalLength $lens -lensSqueezeRatio 1 -cameraScale 1 -horizontalFilmAperture 1.333 -horizontalFilmOffset 0 -verticalFilmAperture 1.0 -verticalFilmOffset 0 -filmFit Fill -overscan 1 -motionBlur 0 -shutterAngle 144 -nearClipPlane 0.01 -farClipPlane 1000 -orthographic 0 -orthographicWidth 30`; 
	rename $turnTable[0] "TURNTABLE_CAM";
	
	// creates Null Group at the center of the Geometry BBox and places the camera as a child
	string $nullGroup = `group`;
	rename $nullGroup "TURNTABLE_PIVOT";
	
	// moves the Null Group
	xform -ws -t $bboxCenter[0] $bboxCenter[1] $bboxCenter[2];
	
	// moves the camera to the proper position
	move -os -a $camPos1[0] $camPos1[1] $camPos1[2] TURNTABLE_CAM;
	
	// sets animation keys for rotation.
	setKeyframe -attribute "ry" -t 1 -v 0 "TURNTABLE_PIVOT";
	setKeyframe -attribute "ry" -t $duration -v (360-(360/$duration)) "TURNTABLE_PIVOT";
}






